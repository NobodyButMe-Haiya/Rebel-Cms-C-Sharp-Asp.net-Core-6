@inject IHttpContextAccessor _httpContextAccessor
@using RebelCmsTemplate.Models.Application
@using RebelCmsTemplate.Repository.Application;
@using RebelCmsTemplate.Repository.Setting;
@using RebelCmsTemplate.Util;
@using RebelCmsTemplate.Enum;
@using RebelCmsTemplate.Models.Setting
@{
    SharedUtil sharedUtils = new(_httpContextAccessor);
    List<ProductCategoryModel> productCategoryModels = new();
    List<ProductTypeModel> productTypeModels = new();
    List<ProductModel> productModels = new();
    try
    {
        ProductCategoryRepository productCategoryRepository = new(_httpContextAccessor);
        productCategoryModels = productCategoryRepository.Read();
        ProductTypeRepository productTypeRepository = new(_httpContextAccessor);
        productTypeModels = productTypeRepository.Read();

        ProductRepository productRepository = new(_httpContextAccessor);
        productModels = productRepository.Read();
    }
    catch (Exception ex)
    {
        sharedUtils.SetSystemException(ex);
    }
    var fileInfo = ViewContext.ExecutingFilePath?.Split("/");
    var filename = fileInfo != null ? fileInfo[4] : "";
    var name = filename.Split(".")[0];

    var navigationModel = sharedUtils.GetNavigation(name);
}

<div class="page-title">
    <div class="row">
        <div class="col-12 col-md-6 order-md-1 order-last">
            <h3>@navigationModel.LeafName</h3>
        </div>
        <div class="col-12 col-md-6 order-md-2 order-first">
            <nav aria-label="breadcrumb" class="breadcrumb-header float-start float-lg-end">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="#">
                            <i class="@navigationModel.FolderIcon"></i> @navigationModel.FolderName
                        </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        <i class="@navigationModel.LeafIcon"></i> @navigationModel.LeafName
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        <i class="fas fa-sign-out-alt"></i>
                        <a href="/logout">Logout</a>
                    </li>
                </ol>
            </nav>
        </div>
    </div>
</div>
<section class="content">
    <div class="container-fluid">
        <form class="form-horizontal">
            <div class="card card-primary">
                <div class="card-header">Filter</div>
                <div class="card-body">
                    <div class="form-group">
                        <div class="col-md-2">
                            <label for="search">Search</label>
                        </div>
                        <div class="col-md-10">
                            <input name="search" id="search" class="form-control"
                                   placeholder="Please Enter Name  Or Other Here" maxlength="64"
                                   style="width: 350px!important;"/>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <button type="button" class="btn btn-info" onclick="searchRecord()">
                        <i class="fas fa-filter"></i> Filter
                    </button>
                    &nbsp;
                    <button type="button" class="btn btn-warning" onclick="resetRecord()">
                        <i class="fas fa-power-off"></i> Reset
                    </button>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-md-12">&nbsp;</div>
            </div>
        </form>
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12">
                <div class="card">
                    <table class="table table-bordered table-striped table-condensed table-hover" id="tableData">
                        <thead>
                        <tr>
                            <td>
                                <label>
                                    <select name="productCategoryKey" id="productCategoryKey" class="form-control" onchange="filterProductType('productTypeKey',this.value)">
                                        <option value="">Please Select</option>

                                        @foreach (var rowCategory in productCategoryModels)
                                        {
                                            <option value="@rowCategory.ProductCategoryKey">@rowCategory.ProductCategoryName</option>
                                        }

                                    </select>
                                </label>
                            </td>
                            <td>
                                <label>
                                    <select name="productTypeKey[]" id="productTypeKey" class="form-control">
                                        <option value="">Please Select</option>

                                        @foreach (var rowType in productTypeModels)
                                        {
                                            <option value="@rowType.ProductTypeName">@rowType.ProductTypeName</option>
                                        }

                                    </select>
                                </label>
                            </td>
                            <td>
                                <label>
                                    <input type="text" name="productName" id="productName"
                                           class="form-control"/>
                                </label>
                            </td>
                            <!--
                            <td>
                                <label>
                                    <input type="text" name="productDescription" id="productDescription"
                                           class="form-control"/>
                                </label>
                            </td>
                            -->
                            <td>
                                <label>
                                    <input type="text" name="productCostPrice" id="productCostPrice"
                                           class="form-control"/>
                                </label>
                            </td>
                            <td>
                                <label>
                                    <input type="text" name="productSellingPrice" id="productSellingPrice"
                                           class="form-control"/>
                                </label>
                            </td>
                            <td style="text-align: center">
                                <Button type="button" class="btn btn-info" onclick="createRecord()">
                                    <i class="fa fa-newspaper"></i>&nbsp;&nbsp;CREATE
                                </Button>
                            </td>
                        </tr>
                        <tr>
                            <th>Category</th>
                            <th>Type</th>
                            <th>Name</th>
                            <!-- <th>Description</th>-->
                            <th>Cost</th>
                            <th>Sell</th>
                            <th style="width: 230px">Process</th>
                        </tr>
                        </thead>
                        <tbody id="tableBody">
                        @foreach (var row in productModels)
                        {
                            <tr id='product-@row.ProductKey'>
                                <td>
                                    <label>
                                        <select id="productCategoryKey-@row.ProductKey" class="form-control" onchange="filterProductType('productTypeKey-@row.ProductKey',this.value);">
                                            <option value="">Please Select</option>
                                            @foreach (var option in from rowCategory in productCategoryModels
                                                let selected =
                                                    rowCategory.ProductCategoryKey == row.ProductCategoryKey ? "selected" : ""
                                                select
                                                    Html.Raw("<option value='" + rowCategory.ProductCategoryKey + "' " + selected + ">" +
                                                             rowCategory.ProductCategoryName + "</option>"))
                                            {
                                                @option
                                            }
                                        </select>
                                    </label>
                                </td>
                                <td>
                                    <label>
                                        <select id="productTypeKey-@row.ProductKey" class="form-control">
                                            <option value="">Please Select</option>
                                            @foreach (var option in from rowType in productTypeModels
                                                let selected =
                                                    rowType.ProductTypeKey == row.ProductTypeKey ? "selected" : ""
                                                select
                                                    Html.Raw("<option value='" + rowType.ProductTypeKey + "' " + selected + ">" +
                                                             rowType.ProductTypeName + "</option>"))
                                            {
                                                @option
                                            }
                                        </select>
                                    </label>
                                </td>
                                <td>
                                    <label>
                                        <input type="text" class="form-control" name="productName[]"
                                               id="productName-@row.ProductKey" value="@row.ProductName"/>
                                    </label>
                                </td>
                                <!---
                                <td>
                                    <label>
                                        <input type="text" name="productDescription" id="productDescription-@row.ProductKey"
                                               class="form-control" value="@row.ProductDescription"/>
                                    </label>
                                </td> -->
                                <td>
                                    <label>
                                        <input type="text" name="productCostPrice" id="productCostPrice-@row.ProductKey"
                                               class="form-control" value="@row.ProductCostPrice"/>
                                    </label>
                                </td>
                                <td>
                                    <label>
                                        <input type="text" name="productSellingPrice" id="productSellingPrice-@row.ProductKey"
                                               class="form-control" value="@row.ProductSellingPrice"/>
                                    </label>
                                </td>
                                <td style="text-align: center">
                                    <div class="btn-group">
                                        <Button type="button" class="btn btn-warning"
                                                onclick="updateRecord(@row.ProductKey)">
                                            <i class="fas fa-edit"></i>&nbsp;UPDATE
                                        </Button>
                                        &nbsp;
                                        <Button type="button" class="btn btn-danger"
                                                onclick="deleteRecord(@row.ProductKey)">
                                            <i class="fas fa-trash"></i>&nbsp;DELETE
                                        </Button>
                                    </div>
                                </td>

                            </tr>
                        }

                        @if (productModels.Count == 0)
                        {
                            <tr>
                                <td colspan="7" class="noRecord">
                                    @SharedUtil.NoRecord
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>


        </div>

    </div>
</section>
<script>
        validateMeCurrencyRange("productCostPrice");
        validateMeCurrencyRange("productSellingPrice");
        var categoryModels = @Json.Serialize(productCategoryModels);
        var typeModels = @Json.Serialize(productTypeModels);
        function resetRecord() {
            readRecord();
            $("#search").val("");
        }
        function emptyTemplate() {
            return "" +
                "<tr>" +
                "<td colspan=\"7\">It's lonely here</td>" +
                "</tr>";
        }
        function template(productKey,productCategoryKey,productTypeKey, productName,productDescription,productCostPrice,productSellingPrice) {

            let productCategoryKeyOptions  = "";
            categoryModels.map((row) => {
                let selected = (parseInt(row.productCategoryKey) === parseInt(productCategoryKey)) ? "selected" : "";
                productCategoryKeyOptions += "<option value='" + row.productCategoryKey + "' " + selected + ">" + row.productCategoryName + "</option>";
            });
            let productTypeKeyOptions = "";
            typeModels.map((row) => {
                let selected = (parseInt(row.productTypeKey) === parseInt(productTypeKey)) ? "selected" : "";
                productTypeKeyOptions += "<option value='" + row.productTypeKey + "' " + selected + ">" + row.productTypeName + "</option>";
            });
            let templateString = "<tr id='product-" + productKey + "'>" +
            "<td class='tdNormalAlign'>" +
            " <label>" +
            "   <select id='productCategoryKey-" + productKey + "' class='form-control'>"+
            "   <option value=''>Please Select</option>";
            
            templateString += productCategoryKeyOptions;
            templateString += "</select>" +
            "</label>" +
            "</td>" +
            "<td class='tdNormalAlign'>" +
            " <label>" +
            "   <select id='productTypeKey-" + productKey + "' class='form-control'>"+
                        "   <option value=''>Please Select</option>";

            templateString += productTypeKeyOptions;
            /***
    "<td>     " +
                "<label>" +
                "<input type='text' class='form-control' name='productDescription' id='productDescription-" + productKey + "' value='" + productDescription + "' />" +
                "</label>" +
                "</td>" +
*/
            templateString += "</select>" +
            "</label>" +
            "</td>" +
                "<td>     " +
                "<label>" +
                "<input type='text' class='form-control' name='productName' id='productName-" + productKey + "' value='" + productName + "' />" +
                "</label>" +
                "</td>" +
            
                "<td>     " +
                "<label>" +
                "<input type='text' class='form-control' name='productCostPrice' id='productCostPrice-" + productKey + "' value='" + productCostPrice + "' />" +
                "</label>" +
                "</td>" +
                "<td>     " +
                "<label>" +
                "<input type='text' class='form-control' name='productSellingPrice' id='productSellingPrice-" + productKey + "' value='" + productSellingPrice + "' />" +
                "</label>" +
                "</td>" +
                "<td style='text-align: center'><div class='btn-group'>" +
                "<Button type='button' class='btn btn-warning' onclick='updateRecord(" + productKey + ")'>" +
                "<i class='fas fa-edit'></i> UPDATE" +
                "</Button>" +
                "&nbsp;" +
                "<Button type='button' class='btn btn-danger' onclick='deleteRecord(" + productKey + ")'>" +
                "<i class='fas fa-trash'></i> DELETE" +
                "</Button>" +
                "</div></td>" +
                "</tr>" +
                "";
            return templateString;
        }

        function createRecord() {
            const $productCategoryKey = $("#productCategoryKey");
            const $productTypeKey = $("#productTypeKey");
            const $productName = $("#productName");
            const $productDescription = $("#productDescription");
            const $productCostPrice = $("#productCostPrice");
            const $productSellingPrice = $("#productSellingPrice");
            $.ajax({
                type: 'POST',
                url: "api/administrator/product",
                async: false,
                data: {
                    mode: 'create',
                    leafCheckKey: @navigationModel.LeafCheckKey,
                    productCategoryKey: $productCategoryKey.val(),
                    productTypeKey: $productTypeKey.val(),
                    productName: $productName.val(),
                    productDescription: $productDescription.val(),
                    productCostPrice: $productCostPrice.val(),
                    productSellingPrice: $productSellingPrice.val(),
                }, statusCode: {
                    500: function() {
                        Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                    }
                },
                beforeSend: function () {
                    console.log("loading ..");
                }}).done(function(data)  {
                    if (data === void 0) {
                        location.href = "/";
                    }
                    let status = data.status;
                         let code = data.code;
                    if (status) {
                        const lastInsertKey = data.lastInsertKey;
                        $("#tableBody").prepend(template(lastInsertKey,$productCategoryKey.val(),$productTypeKey.val(), $productName.val(),$productDescription.val(),$productCostPrice.val(),$productSellingPrice.val()));
                        Swal.fire({
                            title: 'Success!',
                            text: '@SharedUtil.RecordCreated',
                            icon: 'success',
                            confirmButtonText: 'Cool'
                        });
                        $productCategoryKey.val('');
                        $productTypeKey.val('');
                        $productName.val('');
                        $productDescription.val('');
                        $productCostPrice.val('');
                        $productSellingPrice.val('');
                    } else if (status === false) {
                      if (typeof(code) === 'string'){
                          @{
                              if (sharedUtils.GetRoleId().Equals((int) AccessEnum.ADMINISTRATOR_ACCESS))
                              {
                                  <text>
                                  Swal.fire("Debugging Admin", code, "error");
                                  </text>
                              }
                              else
                              {
                                  <text>
                                  Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                  </text>
                              }
                          }
                      }else   if (parseInt(code) === parseInt(@((int) ReturnCodeEnum.ACCESS_DENIED) )) {
                            let timerInterval
                            Swal.fire({
                                title: 'Auto close alert!',
                                html: 'Session Out .Pease Re-login.I will close in <b></b> milliseconds.',
                                timer: 2000,
                                timerProgressBar: true,
                                didOpen: () => {
                                    Swal.showLoading()
                                    const b = Swal.getHtmlContainer().querySelector('b')
                                    timerInterval = setInterval(() => {
                                        b.textContent = Swal.getTimerLeft()
                                    }, 100)
                                },
                                willClose: () => {
                                    clearInterval(timerInterval)
                                }
                            }).then((result) => {
                                if (result.dismiss === Swal.DismissReason.timer) {
                                    console.log('session out .. ');
                                    location.href = "/";
                                }
                            });
                        } else {
                            location.href = "/";
                        }
                    } else {
                        location.href = "/";
                    }
              }).fail(function(xhr)  {
                 console.log(xhr.status)
                 Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
             }).always(function (){
                 console.log("always:complete");    
             });
        }
        function readRecord() {
            let row = { productKey: "", folderName: "" }
            $.ajax({
                type: "post",
                url: "api/administrator/product",
                async: false,
                contentType: "application/x-www-form-urlencoded",
                data: {
                    mode: "read",
                    leafCheckKey: @navigationModel.LeafCheckKey,
                },  statusCode: {
                    500: function() {
                        Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                    }
                },beforeSend() {
                    console.log("loading ..");
                }}).done(function(data)  {
                    if (data === void 0) {
                        location.href = "/";
                    }
                    let status = data.status;
                         let code = data.code;
                    if (status) {
                        if (data.data === void 0) {
                            $("#tableBody").html("").html(emptyTemplate());
                        } else {
                            if (data.data.length > 0) {
                                let templateStringBuilder = "";
                                for (let i = 0; i < data.data.length; i++) {
                                    row = data.data[i];
                                    templateStringBuilder += template(row.productKey,row.productCategoryKey,row.productTypeKey, row.productName,row.productDescription,row.productCostPrice,row.productSellingPrice);
                                }
                                $("#tableBody").html("").html(templateStringBuilder);
                            } else {
                                $("#tableBody").html("").html(emptyTemplate());
                            }
                        }
                    } else if (status === false) {
                    if (typeof(code) === 'string'){
                                                @{
                                                    if (sharedUtils.GetRoleId().Equals((int) AccessEnum.ADMINISTRATOR_ACCESS))
                                                    {
                                                        <text>
                                                        Swal.fire("Debugging Admin", code, "error");
                                                        </text>
                                                    }
                                                    else
                                                    {
                                                        <text>
                                                        Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                        </text>
                                                    }
                                                }
                                            }else     if (parseInt(code) === parseInt(@((int) ReturnCodeEnum.ACCESS_DENIED) )) {
                            let timerInterval
                            Swal.fire({
                                title: 'Auto close alert!',
                                html: 'Session Out .Pease Re-login.I will close in <b></b> milliseconds.',
                                timer: 2000,
                                timerProgressBar: true,
                                didOpen: () => {
                                    Swal.showLoading()
                                    const b = Swal.getHtmlContainer().querySelector('b')
                                    timerInterval = setInterval(() => {
                                        b.textContent = Swal.getTimerLeft()
                                    }, 100)
                                },
                                willClose: () => {
                                    clearInterval(timerInterval)
                                }
                            }).then((result) => {
                                
                                if (result.dismiss === Swal.DismissReason.timer) {
                                    console.log('session out .. ');
                                    location.href = "/";
                                }
                            });
                        } else {
                            location.href = "/";
                        }
                    } else {
                        location.href = "/";
                    }
           }).fail(function(xhr)  {
                                                                  console.log(xhr.status)
                                                                  Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                              }).always(function (){
                                                                  console.log("always:complete");    
                                                              });
        }
        function searchRecord() {
            let row = { productKey: "", folderName: "" }
            $.ajax({
                type: "post",
                url: "api/administrator/product",
                async: false,
                contentType: "application/x-www-form-urlencoded",
                data: {
                    mode: "search",
                    leafCheckKey: @navigationModel.LeafCheckKey,
                    search: $("#search").val()
                },  statusCode: {
                    500: function() {
                        Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                    }
                },beforeSend() {
                    console.log("loading ..");
                }}).done(function(data)  {
                    if (data === void 0) {
                        location.href = "/";
                    }
                    let status  = data.status;
                         let code = data.code;
                    if (status) {
                        if (data.data === void 0) {
                            $("#tableBody").html("").html(emptyTemplate());
                        } else {
                            if (data.data.length > 0) {
                                let templateStringBuilder = "";
                                for (let i = 0; i < data.data.length; i++) {
                                    row = data.data[i];
                                    templateStringBuilder += template(row.productKey,row.productCategoryKey,row.productTypeKey, row.productName,row.productDescription,row.productCostPrice,row.productSellingPrice);
                                }
                                $("#tableBody").html("").html(templateStringBuilder);
                            }
                        }
                    } else if (status === false) {
                     if (typeof(code) === 'string'){
                                                 @{
                                                     if (sharedUtils.GetRoleId().Equals((int) AccessEnum.ADMINISTRATOR_ACCESS))
                                                     {
                                                         <text>
                                                         Swal.fire("Debugging Admin", code, "error");
                                                         </text>
                                                     }
                                                     else
                                                     {
                                                         <text>
                                                         Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                         </text>
                                                     }
                                                 }
                                             }else    if (parseInt(code) === parseInt(@((int) ReturnCodeEnum.ACCESS_DENIED) )) {
                            let timerInterval
                            Swal.fire({
                                title: 'Auto close alert!',
                                html: 'Session Out .Pease Re-login.I will close in <b></b> milliseconds.',
                                timer: 2000,
                                timerProgressBar: true,
                                didOpen: () => {
                                    Swal.showLoading()
                                    const b = Swal.getHtmlContainer().querySelector('b')
                                    timerInterval = setInterval(() => {
                                        b.textContent = Swal.getTimerLeft()
                                    }, 100)
                                },
                                willClose: () => {
                                    clearInterval(timerInterval)
                                }
                            }).then((result) => {
                                
                                if (result.dismiss === Swal.DismissReason.timer) {
                                    console.log('session out .. ');
                                    location.href = "/";
                                }
                            });
                        } else {
                            location.href = "/";
                        }
                    } else {
                        location.href = "/";
                    }
           }).fail(function(xhr)  {
                                                                  console.log(xhr.status)
                                                                  Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                              }).always(function (){
                                                                  console.log("always:complete");    
                                                              });
        }
        function updateRecord(productKey) {
            $.ajax({
                type: 'POST',
                url: "api/administrator/product",
                async: false,
                data: {
                    mode: 'update',
                    leafCheckKey: @navigationModel.LeafCheckKey,
                    productKey: productKey,
                    productCategoryKey: $("#productCategoryKey-" + productKey).val(),
                    productTypeKey: $("#productTypeKey-" + productKey).val(),
                    productName: $("#productName-" + productKey).val(),
                    productDescription: $("#productDescription-" + productKey).val(),
                    productCostPrice: $("#productCostPrice-" + productKey).val(),
                    productSellingPrice: $("#productSellingPrice-" + productKey).val()
                   
                }, statusCode: {
                    500: function() {
                        Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                    }
                },
                beforeSend: function () {
                    console.log("loading..");
                }}).done(function(data)  {
                    if (data === void 0) {
                        location.href = "/";
                    }
                    let status = data.status;
                         let code = data.code;
                    if (status) {
                        Swal.fire("System", "@SharedUtil.RecordUpdated", 'success')
                    } else if (status === false) {
                   if (typeof(code) === 'string'){
                                               @{
                                                   if (sharedUtils.GetRoleId().Equals((int) AccessEnum.ADMINISTRATOR_ACCESS))
                                                   {
                                                       <text>
                                                       Swal.fire("Debugging Admin", code, "error");
                                                       </text>
                                                   }
                                                   else
                                                   {
                                                       <text>
                                                       Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                       </text>
                                                   }
                                               }
                                           }else      if (parseInt(code) === parseInt(@((int) ReturnCodeEnum.ACCESS_DENIED) )) {
                            let timerInterval
                            Swal.fire({
                                title: 'Auto close alert!',
                                html: 'Session Out .Pease Re-login.I will close in <b></b> milliseconds.',
                                timer: 2000,
                                timerProgressBar: true,
                                didOpen: () => {
                                    Swal.showLoading()
                                    const b = Swal.getHtmlContainer().querySelector('b')
                                    timerInterval = setInterval(() => {
                                        b.textContent = Swal.getTimerLeft()
                                    }, 100)
                                },
                                willClose: () => {
                                    clearInterval(timerInterval)
                                }
                            }).then((result) => {
                                if (result.dismiss === Swal.DismissReason.timer) {
                                    console.log('session out .. ');
                                    location.href = "/";
                                }
                            });
                        } else {
                            location.href = "/";
                        }
                    } else {
                        location.href = "/";
                    }
          }).fail(function(xhr)  {
                                                                 console.log(xhr.status)
                                                                 Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                             }).always(function (){
                                                                 console.log("always:complete");    
                                                             });
        }

        function deleteRecord(productKey) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'No, cancel!',
                reverseButtons: true
            }).then((result) => {
                if (result.value) {
                    $.ajax({
                        type: 'POST',
                        url: "api/administrator/product",
                        async: false,
                        data: {
                            mode: 'delete',
                            leafCheckKey: @navigationModel.LeafCheckKey,
                            productKey: productKey
                        }, statusCode: {
                            500: function() {
                                Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                            }
                        },
                        beforeSend: function () {
                            console.log("loading..");
                        }}).done(function(data)  {
                            if (data === void 0) {
                                location.href = "/";
                            }
                            let status = data.status;
                                 let code = data.code;
                            if (status) {
                                $("#product-" + productKey).remove();
                                Swal.fire("System", "@SharedUtil.RecordDeleted", "success");
                            } else if (status === false) {
                            if (typeof(code) === 'string'){
                                                        @{
                                                            if (sharedUtils.GetRoleId().Equals((int) AccessEnum.ADMINISTRATOR_ACCESS))
                                                            {
                                                                <text>
                                                                Swal.fire("Debugging Admin", code, "error");
                                                                </text>
                                                            }
                                                            else
                                                            {
                                                                <text>
                                                                Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                                </text>
                                                            }
                                                        }
                                                    }else     if (parseInt(code) === parseInt(@((int) ReturnCodeEnum.ACCESS_DENIED) )) {
                                    let timerInterval
                                    Swal.fire({
                                        title: 'Auto close alert!',
                                        html: 'Session Out .Pease Re-login.I will close in <b></b> milliseconds.',
                                        timer: 2000,
                                        timerProgressBar: true,
                                        didOpen: () => {
                                            Swal.showLoading()
                                            const b = Swal.getHtmlContainer().querySelector('b')
                                            timerInterval = setInterval(() => {
                                                b.textContent = Swal.getTimerLeft()
                                            }, 100)
                                        },
                                        willClose: () => {
                                            clearInterval(timerInterval)
                                        }
                                    }).then((result) => {
                                        if (result.dismiss === Swal.DismissReason.timer) {
                                            console.log('session out .. ');
                                            location.href = "/";
                                        }
                                    });
                                } else {
                                    location.href = "/";
                                }
                            } else {
                                location.href = "/";
                            }
                       }).fail(function(xhr)  {
                                                                              console.log(xhr.status)
                                                                              Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                                          }).always(function (){
                                                                              console.log("always:complete");    
                                                                          });
                } else if (result.dismiss === swal.DismissReason.cancel) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Cancelled',
                        text: 'Be careful before delete record'
                    })
                }
            });

        }
        function filterProductType(domId,productCategoryKey) { 
            let productTypeKeyOptions = "";
            if (productCategoryKey>0){              
                typeModels.map((row) => {
                    if ( parseInt(row.productCategoryKey) === parseInt(productCategoryKey)) {
                        productTypeKeyOptions += "<option value='" + row.productTypeKey + "' >" + row.productTypeName + "</option>";
                    }
                });
            }else{
                   typeModels.map((row) => {
                       productTypeKeyOptions += "<option value='" + row.productTypeKey + "' >" + row.productTypeName + "</option>";
                    });
            }
            $("#"+domId).html("").html(productTypeKeyOptions);
        }
    </script>