@inject IHttpContextAccessor _httpContextAccessor
@using RebelCmsTemplate.Models.Application
@using RebelCmsTemplate.Repository.Application
@using RebelCmsTemplate.Util;
@using RebelCmsTemplate.Enum;
@using Microsoft.AspNetCore.Http
@{
    SharedUtil sharedUtils = new(_httpContextAccessor);
    List<InvoiceModel> invoiceModels = new();
    List<CustomerModel> customerModels = new();
    List<ShipperModel> shipperModels = new();
    List<EmployeeModel> employeeModels = new();
    List<ProductModel> productModels = new();
    try
    {
        CustomerRepository customerRepository = new(_httpContextAccessor);
        customerModels = customerRepository.Read();
        ShipperRepository shipperRepository = new(_httpContextAccessor);
        shipperModels = shipperRepository.Read();
        EmployeeRepository employeeRepository = new(_httpContextAccessor);
        employeeModels = employeeRepository.Read();
        ProductRepository productRepository = new(_httpContextAccessor);
        productModels = productRepository.Read();

        InvoiceRepository invoiceRepository = new(_httpContextAccessor);
        invoiceModels = invoiceRepository.Read();
    }
    catch (Exception ex)
    {
        sharedUtils.SetSystemException(ex);
    }
    var fileInfo = ViewContext.ExecutingFilePath?.Split("/");
    var filename = fileInfo != null ? fileInfo[4] : "";
    var name = filename.Split(".")[0];
    var navigationModel = sharedUtils.GetNavigation(name);
}
<div class="page-title">
    <div class="row">
        <div class="col-12 col-md-6 order-md-1 order-last">
            <h3>@navigationModel.LeafName</h3>
        </div>
        <div class="col-12 col-md-6 order-md-2 order-first">
            <nav aria-label="breadcrumb" class="breadcrumb-header float-start float-lg-end">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="#">
                            <i class="@navigationModel.FolderIcon"></i> @navigationModel.FolderName
                        </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        <i class="@navigationModel.LeafIcon"></i> @navigationModel.LeafName
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        <i class="fas fa-file-excel"></i>
                        <a href="#" onclick="excelRecord()">Excel</a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        <i class="fas fa-sign-out-alt"></i>
                        <a href="/logout">Logout</a>
                    </li>
                </ol>
            </nav>
        </div>
    </div>
</div>
<section class="content">
    <div class="container-fluid">
        <div id="listView">
            <div class="card" id="searchBox">
                <div class="card-header">
                    <label for="search">Search</label>
                </div>
                <div class="card-body">
                    <input name="search" id="search" class="form-control" placeholder="Please Enter Name  Or Other Here"
                        maxlength="64" style="width: 350px!important;" />
                </div>
                <div class="card-footer">
                    <button type="button" class="btn btn-info" onclick="searchRecord()">
                        <i class="fas fa-filter"></i> Filter
                    </button>
                    &nbsp;
                    <button type="button" class="btn btn-warning" onclick="resetRecord()">
                        <i class="fas fa-power-off"></i> Reset
                    </button>
                    &nbsp;
                    <button type="button" class="btn btn-success" onclick="newRecord()">
                        <i class="fas fa-plus"></i> Create New Record
                    </button>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-md-12">&nbsp;</div>
            </div>
            <div class="card">
                <table class="table table-bordered table-striped table-condensed table-hover table-fixed">
                    <thead>
                        <tr>
                            <th>Customer</th>
                            <th>Shipper</th>
                            <th>Employee</th>
                            <th>Order Date</th>
                            <th>Required Date</th>
                            <th style="width: 230px">Process</th>
                        </tr>
                    </thead>
                    <tbody id="tableBody">
                        @foreach (var row in invoiceModels)
                        {
                            <tr id='invoice-@row.InvoiceKey'>
                                <td>@row.CustomerName</td>
                                <td>@row.ShipperName</td>
                                <td>@row.EmployeeLastName</td>
                                <td>@row.InvoiceOrderDate</td>
                                <td>@row.InvoiceRequiredDate</td>
                                <td style="text-align: center">
                                    <Button type="button" class="btn btn-warning" onclick="viewRecord(@row.InvoiceKey)">
                                        <i class="fas fa-edit"></i>&nbsp;VIEW
                                    </Button>
                                </td>
                            </tr>
                        }
                        @if (invoiceModels.Count == 0)
                        {
                            <tr>
                                <td colspan="16" class="noRecord">
                                    @SharedUtil.NoRecord
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div id="formView" style="display:none">
            <form class="form-horizontal">
                <div class="card card-primary">
                    <div class="card-header">
                        <Button id="createButton" type="button" class="btn btn-success" onclick="createRecord()">
                            <i class="fas fa-newspaper"></i>&nbsp;CREATE
                        </Button>&nbsp;
                        <Button id="updateButton" type="button" class="btn btn-warning" onclick="updateRecord()"
                            disabled="disabled">
                            <i class="fas fa-edit"></i>&nbsp;UPDATE
                        </Button>&nbsp;
                        <Button id="deleteButton" type="button" class="btn btn-danger" onclick="deleteRecord()"
                            disabled="disabled">
                            <i class="fas fa-trash"></i>&nbsp;DELETE
                        </Button>&nbsp;
                        <button type="button" class="btn btn-warning" onclick="resetForm()">
                            <i class="fas fa-power-off"></i>&nbsp;RESET
                        </button>
                        <Button id="viewListButton" type="button" class="btn btn-danger" onclick="viewListRecord()">
                            <i class="fas fa-list"></i>&nbsp;LIST
                        </Button>&nbsp;
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <input type="hidden" id="invoiceKey" value="0" />
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="customerKey">Customer</label>
                                    <select name="customerKey" id="customerKey" class="form-control">
                                        @if (customerModels.Count == 0)
                                        {
                                            <option value="">Please Create A New field </option>
                                        }
                                        else
                                        {
                                            foreach (var rowCustomer in customerModels)
                                            {
                                                <option value="@rowCustomer.CustomerKey"> @rowCustomer.CustomerName </option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="shipperKey">Shipper</label>
                                    <select name="shipperKey" id="shipperKey" class="form-control">
                                        @if (shipperModels.Count == 0)
                                        {
                                            <option value="">Please Create A New field </option>
                                        }
                                        else
                                        {
                                            foreach (var rowShipper in shipperModels)
                                            {
                                                <option value="@rowShipper.ShipperKey"> @rowShipper.ShipperName </option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="employeeKey">Employee</label>
                                    <select name="employeeKey" id="employeeKey" class="form-control">
                                        @if (employeeModels.Count == 0)
                                        {
                                            <option value="">Please Create A New field </option>
                                        }
                                        else
                                        {
                                            foreach (var rowEmployee in employeeModels)
                                            {
                                                <option value="@rowEmployee.EmployeeKey"> @rowEmployee.EmployeeLastName
                                                </option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="invoiceOrderDate">Order Date</label>
                                    <input type="date" id="invoiceOrderDate" class="form-control" value="" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="invoiceRequiredDate">Required Date</label>
                                    <input type="date" id="invoiceRequiredDate" class="form-control" value="" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="invoiceShippedDate">Shipped Date</label>
                                    <input type="date" id="invoiceShippedDate" class="form-control" value="" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="invoiceFreight">Freight</label>
                                    <input type="number" step="0.01" id="invoiceFreight" class="form-control" value="0"
                                        maxlength="104" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="invoiceShipName">Ship Name</label>
                                    <input type="text" id="invoiceShipName" class="form-control" value=" "
                                        maxlength="40" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="invoiceShipAddress">Ship Address</label>
                                    <input type="text" id="invoiceShipAddress" class="form-control" value=" "
                                        maxlength="60" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="invoiceShipCity">Ship City</label>
                                    <input type="text" id="invoiceShipCity" class="form-control" value=" "
                                        maxlength="15" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="invoiceShipRegion">Ship Region</label>
                                    <input type="text" id="invoiceShipRegion" class="form-control" value=" "
                                        maxlength="15" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="invoiceShipPostalCode">Ship Postal Code</label>
                                    <input type="text" id="invoiceShipPostalCode" class="form-control" value=" "
                                        maxlength="10" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="invoiceShipCountry">Ship Country</label>
                                    <input type="text" id="invoiceShipCountry" class="form-control" value=" "
                                        maxlength="15" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                        </div>
                    </div>
                </div>
            </form>
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-md-12">&nbsp;</div>
            </div>
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-md-12">
                    <div class="card">
                        <table class="table table-bordered table-striped table-condensed table-hover" id="tableData">
                            <thead>
                                <tr>
                                    <td>
                                        <label>
                                            <select name="productKey" id="detail_productKey" class="form-control">
                                                @if (productModels.Count == 0)
                                                {
                                                    <option value="">Please Create A New field </option>
                                                }
                                                else
                                                {
                                                    foreach (var rowProduct in productModels)
                                                    {
                                                        <option value="@rowProduct.ProductKey">
                                                            @rowProduct.ProductName
                                                        </option>
                                                    }
                                                }
                                            </select>
                                        </label>
                                    </td>
                                    <td>
                                        <label>
                                            <input type="number" step="0.01" name="invoiceDetailUnitPrice"
                                                id="detail_invoiceDetailUnitPrice" class="form-control" />
                                        </label>
                                    </td>
                                    <td>
                                        <label>
                                            <input type="number" name="invoiceDetailQuantity"
                                                id="detail_invoiceDetailQuantity" class="form-control" />
                                        </label>
                                    </td>
                                    <td>
                                        <label>
                                            <input type="number" step="0.01" name="invoiceDetailDiscount"
                                                id="detail_invoiceDetailDiscount" class="form-control" />
                                        </label>
                                    </td>
                                    <td style="text-align: center">
                                        <Button id="createDetailButton" type="button" class="btn btn-info"
                                            onclick="createDetailRecord()" disabled="disabled">
                                            <i class="fa fa-newspaper"></i>&nbsp;&nbsp;CREATE
                                        </Button>
                                    </td>
                                </tr>
                                <tr>
                                    <th>Product</th>
                                    <th>Detail Unit Price</th>
                                    <th>Detail Quantity</th>
                                    <th>Detail Discount</th>
                                    <th style="width: 230px">Process</th>
                                </tr>
                            </thead>
                            <tbody id="tableDetailBody"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<script>
    var customerModels = @Json.Serialize(customerModels);
    var shipperModels = @Json.Serialize(shipperModels);
    var employeeModels = @Json.Serialize(employeeModels);
    var productModels = @Json.Serialize(productModels);
</script>
<script>
    var $invoiceKey = $("#invoiceKey");
    var $customerKey = $("#customerKey");
    var $shipperKey = $("#shipperKey");
    var $employeeKey = $("#employeeKey");
    var $invoiceOrderDate = $("#invoiceOrderDate");
    var $invoiceRequiredDate = $("#invoiceRequiredDate");
    var $invoiceShippedDate = $("#invoiceShippedDate");
    var $invoiceFreight = $("#invoiceFreight");
    var $invoiceShipName = $("#invoiceShipName");
    var $invoiceShipAddress = $("#invoiceShipAddress");
    var $invoiceShipCity = $("#invoiceShipCity");
    var $invoiceShipRegion = $("#invoiceShipRegion");
    var $invoiceShipPostalCode = $("#invoiceShipPostalCode");
    var $nvoiceShipCountry = $("#invoiceShipCountry");

    function newRecord() {
        $("#listView").hide();
        $("#formView").show();
        resetForm();
    }
    function viewListRecord() {
        $("#listView").show();
        $("#formView").hide();
    }
    function resetForm() {
        emptyForm();
        $("#createButton").removeAttr("disabled");
        $("#updateButton").attr("disabled", "disabled");
        $("#deleteButton").attr("disabled", "disabled");
    }
    function emptyForm() {
        $invoiceKey.val("");
        $customerKey.val("");
        $shipperKey.val("");
        $employeeKey.val("");
        $invoiceOrderDate.val("");
        $invoiceRequiredDate.val("");
        $invoiceShippedDate.val("");
        $invoiceFreight.val("");
        $invoiceShipName.val("");
        $invoiceShipAddress.val("");
        $invoiceShipCity.val("");
        $invoiceShipRegion.val("");
        $invoiceShipPostalCode.val("");
        $nvoiceShipCountry.val("");
    }
    function resetRecord() {
        readRecord();
        emptyForm();
        $("#search").val("");

    }
    function emptyTemplate() {
        return "<tr><td colspan='6'>It's lonely here</td></tr>";
    }
    function emptyDetailTemplate() {
        return "<tr><td colspan='16'>It's lonely here</td></tr>";
    }
    function template(invoiceKey, customerName, shipperName, employeeLastName, invoiceOrderDate, invoiceRequiredDate, invoiceShippedDate, invoiceFreight, invoiceShipName, invoiceShipAddress, invoiceShipCity, invoiceShipRegion, invoiceShipPostalCode, invoiceShipCountry) {
        let template = "" +
            "<tr id='invoice-" + invoiceKey + "'>" +
            "<td>" + customerName + "</td>" +
            "<td>" + shipperName + "</td>" +
            "<td>" + employeeLastName + "</td>" +
            "<td>" + invoiceOrderDate + "</td>" +
            "<td>" + invoiceRequiredDate + "</td>" +
            "<td style='text-align: center'><div class='btn-group'>" +
            "<Button type='button' class='btn btn-warning' onclick='viewRecord(" + invoiceKey + ")'>" +
            "<i class='fas fa-search'></i> View" +
            "</Button>" +
            "</div></td>" +
            "</tr>";
        return template;
    }
    function templateDetail(invoiceDetailKey, invoiceKey, productKey, invoiceDetailUnitPrice, invoiceDetailQuantity, invoiceDetailDiscount) {
        let productKeyOptions = "";
        let i = 0;
        productModels.map((row) => {
            i++;
            const selected = (parseInt(row.productKey) === parseInt(productKey)) ? "selected" : "";
            productKeyOptions += "<option value='" + row.productKey + "' " + selected + ">" + row.productName + "</option>";
        });
        let template = "" +
            "<tr id='invoiceDetail-" + invoiceDetailKey + "'>" +
            "<td class='tdNormalAlign'>" +
            " <label>" +
            "<select id='productKey-" + invoiceDetailKey + "' class='form-control'>";
        template += productKeyOptions;
        template += "</select>" +
            "</label>" +
            "</td>" +
            "<td>" +
            "<label>" +
            "<input type='number' step='0.01' name='invoiceDetailUnitPrice' id='invoiceDetailUnitPrice-" + invoiceDetailKey + "' value='" + invoiceDetailUnitPrice + "' class='form-control' />" +
            "</label>" +
            "</td>" +
            "<td>" +
            "<label>" +
            "<input type='number' name='invoiceDetailQuantity' id='invoiceDetailQuantity-" + invoiceDetailKey + "' value='" + invoiceDetailQuantity + "' class='form-control' />" +
            "</label>" +
            "</td>" +
            "<td>" +
            "<label>" +
            "<input type='number' step='0.01' name='invoiceDetailDiscount' id='invoiceDetailDiscount-" + invoiceDetailKey + "' value='" + invoiceDetailDiscount + "' class='form-control' />" +
            "</label>" +
            "</td>" +
            "<td style='text-align: center'><div class='btn-group'>" +
            " <Button type='button' class='btn btn-warning' onclick='updateDetailRecord(" + invoiceDetailKey + ")'>" +
            "<i class='fas fa-edit'></i> UPDATE" +
            "</Button>" +
            "&nbsp;" +
            "<Button type='button' class='btn btn-danger' onclick='deleteDetailRecord(" + invoiceDetailKey + ")'>" +
            "<i class='fas fa-trash'></i> DELETE" +
            "</Button>" +
            "</div></td>" +
            "</tr>";
        return template;
    }
    function createRecord() {
        if ($customerKey.val().length === 0) {
            Swal.fire("System Error", "Please Enter all the form", "error");
            $customerKey.addClass("is-invalid").trigger('focus');
        }
        else if ($shipperKey.val().length === 0) {
            Swal.fire("System Error", "Please Enter all the form", "error");
            $shipperKey.addClass("is-invalid").trigger('focus');
        }
        else if ($employeeKey.val().length === 0) {
            Swal.fire("System Error", "Please Enter all the form", "error");
            $employeeKey.addClass("is-invalid").trigger('focus');
        }
        else {
            $customerKey.removeClass("is-invalid");
            $shipperKey.removeClass("is-invalid");
            $employeeKey.removeClass("is-invalid");
            $.ajax({
                type: 'POST',
                url: "api/application/invoice",
                async: false,
                data: {
                    mode: 'create',
                    leafCheckKey: @navigationModel.LeafCheckKey,
                    customerKey: $customerKey.val(),
                    shipperKey: $shipperKey.val(),
                    employeeKey: $employeeKey.val(),
                    invoiceOrderDate: $invoiceOrderDate.val(),
                    invoiceRequiredDate: $invoiceRequiredDate.val(),
                    invoiceShippedDate: $invoiceShippedDate.val(),
                    invoiceFreight: $invoiceFreight.val(),
                    invoiceShipName: $invoiceShipName.val(),
                    invoiceShipAddress: $invoiceShipAddress.val(),
                    invoiceShipCity: $invoiceShipCity.val(),
                    invoiceShipRegion: $invoiceShipRegion.val(),
                    invoiceShipPostalCode: $invoiceShipPostalCode.val(),
                    invoiceShipCountry: $invoiceShipCountry.val(),
                }, statusCode: {
                    500: function () {
                        Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                    }
                },
                beforeSend: function () {
                    console.log("loading ..");
                }
            }).done(function (data) {
                if (data === void 0) {
                    location.href = "/";
                }
                let status = data.status;
                let code = data.code;
                if (status) {
                    const lastInsertKey = data.lastInsertKey;
                    $("#invoiceKey").val(lastInsertKey);
                    $("#createButton").attr("disabled", "disabled");
                    $("#updateButton").removeAttr("disabled");
                    $("#deleteButton").removeAttr("disabled");
                    Swal.fire({
                        title: 'Success!',
                        text: '@SharedUtil.RecordCreated',
                        icon: 'success',
                        confirmButtonText: 'Cool'
                    });
                } else if (status === false) {
                    if (parseInt(code) === accessDeniedCode) {
                        accessDenied();
                    } else if (typeof (code) === 'string') {
                        callBackError();
                    } else if {
                        location.href = "/";
                    }
                } else {
                    location.href = "/";
                }
            }).fail(function (xhr) {
                console.log(xhr.status);
                Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
            }).always(function () {
                console.log("always:complete");
            });
        }
    }
    function createDetailRecord() {
        const $invoiceKey = $("#invoiceKey");
        const $productKey = $("#detail_productKey");
        const $invoiceDetailUnitPrice = $("#detail_invoiceDetailUnitPrice");
        const $invoiceDetailQuantity = $("#detail_invoiceDetailQuantity");
        const $invoiceDetailDiscount = $("#detail_invoiceDetailDiscount");

        if ($productKey.val().length === 0) {
            Swal.fire("System Error", "Please Enter all the form", "error");
            $productKey.addClass("is-invalid").trigger('focus');
        }
        else {
            $productKey.removeClass("is-invalid");
            $.ajax({
                type: 'POST',
                url: "api/application/invoiceDetail",
                async: false,
                data: {
                    mode: 'create',
                    leafCheckKey: @navigationModel.LeafCheckKey,
                    invoiceKey: $invoiceKey.val(),
                    productKey: $productKey.val(),
                    invoiceDetailUnitPrice: $invoiceDetailUnitPrice.val(),
                    invoiceDetailQuantity: $invoiceDetailQuantity.val(),
                    invoiceDetailDiscount: $invoiceDetailDiscount.val(),
                },
                statusCode: {
                    500: function () {
                        Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                        accessDenied();
                    }
                },
                beforeSend: function () {
                    console.log("loading ..");
                }
            }).done(function (data) {
                if (data === void 0) {
                    location.href = "/";
                }
                let status = data.status;
                let code = data.code;
                if (status) {
                    const lastInsertKey = data.lastInsertKey;
                    $("#tableDetailBody").prepend(templateDetail(lastInsertKey, invoiceKey.val(), productKey.val(), invoiceDetailUnitPrice.val(), invoiceDetailQuantity.val(), invoiceDetailDiscount.val()));
                    Swal.fire({
                        title: 'Success!',
                        text: '@SharedUtil.RecordCreated',
                        icon: 'success',
                        confirmButtonText: 'Cool'
                    });
                    $productKey.val('');
                    $invoiceDetailUnitPrice.val('');
                    $invoiceDetailQuantity.val('');
                    $invoiceDetailDiscount.val('');
                } else if (status === false) {
                    if (parseInt(code) === accessDeniedCode) {
                        accessDenied();
                    } else if (typeof (code) === 'string') {
                        callBackError();
                    } else if {
                        location.href = "/";
                    }
                } else {
                    location.href = "/";
                }
            }).fail(function (xhr) {
                console.log(xhr.status);
                Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
            }).always(function () {
                console.log("always:complete");
            });
        }
    }
    function readRecord() {
        $.ajax({
            type: "post",
            url: "api/application/invoice",
            async: false,
            contentType: "application/x-www-form-urlencoded",
            data: {
                mode: "read",
                leafCheckKey: @navigationModel.LeafCheckKey,
            }, statusCode: {
                500: function () {
                    Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                    accessDenied();
                }
            }, beforeSend() {
                console.log("loading ..");
            }
        }).done(function (data) {
            if (data === void 0) {
                location.href = "/";
            }
            let status = data.status;
            let code = data.code;
            if (status) {
                if (data.data === void 0) {
                    $("#tableBody").html("").html(emptyTemplate());
                } else {
                    if (data.data.length > 0) {
                        let templateStringBuilder = "";
                        for (let i = 0; i < data.data.length; i++) {
                            let row = data.data[i];
                            templateStringBuilder += template(row.invoiceKey, row.customerName, row.shipperName, row.employeeLastName, row.invoiceOrderDate);
                        }
                        $("#tableBody").html("").html(templateStringBuilder);
                    } else {
                        $("#tableBody").html("").html(emptyTemplate());
                    }
                }
            } else if (status === false) {
                if (parseInt(code) === accessDeniedCode) {
                    accessDenied();
                } else if (typeof (code) === 'string') {
                    callBackError();
                } else if {
                    location.href = "/";
                }
            } else {
                location.href = "/";
            }
        }).fail(function (xhr) {
            console.log(xhr.status);
            Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
        }).always(function () {
            console.log("always:complete");
        });
    }
    function readDetailRecord() {
        $.ajax({
            type: "post",
            url: "api/application/invoiceDetail",
            async: false,
            contentType: "application/x-www-form-urlencoded",
            data: {
                mode: "read",
                leafCheckKey: @navigationModel.LeafCheckKey,
            },
            statusCode: {
                500: function () {
                    Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                    accessDenied();
                }
            }, beforeSend() {
                console.log("loading ..");
            }
        }).done(function (data) {
            if (data === void 0) {
                location.href = "/";
            }
            let status = data.status;
            let code = data.code;
            if (status) {
                if (data.data === void 0) {
                    $("#tableBody").html("").html(emptyTemplate());
                } else {
                    if (data.data.length > 0) {
                        let templateStringBuilder = "";
                        for (let i = 0; i < data.data.length; i++) {
                            let row = data.data[i];
                            templateStringBuilder += template(row.invoiceDetailKey, row.invoiceKey, row.productKey, row.invoiceDetailUnitPrice, row.invoiceDetailQuantity, row.invoiceDetailDiscount);
                        }
                        $("#tableDetailBody").html("").html(templateStringBuilder);
                    } else {
                        $("#tableDetailBody").html("").html(emptyTemplate());
                    }
                }
            } else if (status === false) {
                if (parseInt(code) === accessDeniedCode) {
                    accessDenied();
                } else if (typeof (code) === 'string') {
                    callBackError();
                } else if {
                    location.href = "/";
                }
            } else {
                location.href = "/";
            }
        }).fail(function (xhr) {
            console.log(xhr.status);
            Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
        }).always(function () {
            console.log("always:complete");
        });
    }
    function searchRecord() {
        $.ajax({
            type: "post",
            url: "api/application/invoice",
            async: false,
            contentType: "application/x-www-form-urlencoded",
            data: {
                mode: "search",
                leafCheckKey: @navigationModel.LeafCheckKey,
                search: $("#search").val()
            },
            statusCode: {
                500: function () {
                    Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                    accessDenied();
                }
            }, beforeSend() {
                console.log("loading ..");
            }
        }).done(function (data) {
            if (data === void 0) { location.href = "/"; }
            let status = data.status;
            let code = data.code;
            if (status) {
                if (data.data === void 0) {
                    $("#tableBody").html("").html(emptyTemplate());
                } else {
                    if (data.data.length > 0) {
                        let templateStringBuilder = "";
                        for (let i = 0; i < data.data.length; i++) {
                            let row = data.data[i];
                            templateStringBuilder += template(row.invoiceKey, row.customerName, row.shipperName, row.employeeLastName, row.invoiceOrderDate, row.invoiceRequiredDate, row.invoiceShippedDate, row.invoiceFreight, row.invoiceShipName, row.invoiceShipAddress, row.invoiceShipCity, row.invoiceShipRegion, row.invoiceShipPostalCode, row.invoiceShipCountry);
                        }
                        $("#tableBody").html("").html(templateStringBuilder);
                    }
                }
            } else if (status === false) {
                if (parseInt(code) === accessDeniedCode) {
                    accessDenied();
                } else if (typeof (code) === 'string') {
                    callBackError();
                } else if {
                    location.href = "/";
                }
            } else {
                location.href = "/";
            }
        }).fail(function (xhr) {
            console.log(xhr.status);
            Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
        }).always(function () {
            console.log("always:complete");
        });
    }
    function excelRecord() {
        window.open("api/application/invoice");
    }
    function viewRecord(invoiceKey) {
        $("#listView").hide();
        $("#formView").show();
        $.ajax({
            type: "post",
            url: "api/application/invoice",
            async: false,
            contentType: "application/x-www-form-urlencoded",
            data: {
                mode: "singleWithDetail",
                leafCheckKey: @navigationModel.LeafCheckKey,
                invoiceKey: invoiceKey
            },
            statusCode: {
                500: function () {
                    Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                    accessDenied();
                }
            }, beforeSend() {
                console.log("loading ..");
            }
        }).done(function (data) {
            if (data === void 0) { location.href = "/"; }
            let status = data.status;
            let code = data.code;
            if (status) {
                if (data.dataSingle === void 0) {
                    $("#tableBody").html("").html(emptyTemplate());
                } else {
                    $invoiceKey.val(data.dataSingle.invoiceKey);
                    $customerKey.val(data.dataSingle.customerKey);
                    $shipperKey.val(data.dataSingle.shipperKey);
                    $employeeKey.val(data.dataSingle.employeeKey);
                    $invoiceOrderDate.val(data.dataSingle.invoiceOrderDate);
                    $invoiceRequiredDate.val(data.dataSingle.invoiceRequiredDate);
                    $invoiceShippedDate.val(data.dataSingle.invoiceShippedDate);
                    $invoiceFreight.val(data.dataSingle.invoiceFreight);
                    $invoiceShipName.val(data.dataSingle.invoiceShipName);
                    $invoiceShipAddress.val(data.dataSingle.invoiceShipAddress);
                    $invoiceShipCity.val(data.dataSingle.invoiceShipCity);
                    $invoiceShipRegion.val(data.dataSingle.invoiceShipRegion);
                    $invoiceShipPostalCode.val(data.dataSingle.invoiceShipPostalCode);
                    $invoiceShipCountry.val(data.dataSingle.invoiceShipCountry);
                    if (data.dataSingle.data.length > 0) {
                        let templateStringBuilder = "";
                        for (let i = 0; i < data.dataSingle.data.length; i++) {
                            let row = data.dataSingle.data[i];
                            templateStringBuilder += templateDetail(row.invoiceDetailKey, row.invoiceKey, row.productKey, row.invoiceDetailUnitPrice, row.invoiceDetailQuantity, row.invoiceDetailDiscount);
                        }
                        $("#tableDetailBody").html("").html(templateStringBuilder);
                    }
                    $("#createButton").attr("disabled", "disabled");
                    $("#updateButton").removeAttr("disabled");
                    $("#deleteButton").removeAttr("disabled");
                    $("html, body").animate({ scrollTop: 0 }, "slow");
                }
            } else if (status === false) {
                if (parseInt(code) === accessDeniedCode) {
                    accessDenied();
                } else if (typeof (code) === 'string') {
                    callBackError();
                } else if {
                    location.href = "/";
                }
            } else {
                location.href = "/";
            }
        }).fail(function (xhr) {
            console.log(xhr.status);
            Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
        }).always(function () {
            console.log("always:complete");
        });
    }
    function excelRecord() {
        window.open("api/application/invoice");
    }
    function updateRecord() {
        if ($customerKey.val().length === 0) {
            Swal.fire("System Error", "Please Enter all the form", "error");
            $customerKey.addClass("is-invalid").trigger('focus');
        }
        else if ($shipperKey.val().length === 0) {
            Swal.fire("System Error", "Please Enter all the form", "error");
            $shipperKey.addClass("is-invalid").trigger('focus');
        }
        else if ($employeeKey.val().length === 0) {
            Swal.fire("System Error", "Please Enter all the form", "error");
            $employeeKey.addClass("is-invalid").trigger('focus');
        }
        else {
            $customerKey.removeClass("is-invalid");
            $shipperKey.removeClass("is-invalid");
            $employeeKey.removeClass("is-invalid");
            $.ajax({
                type: 'POST',
                url: "api/application/invoice",
                async: false,
                data: {
                    mode: 'update',
                    leafCheckKey: @navigationModel.LeafCheckKey,
                    invoiceKey: $invoiceKey.val(),
                    customerKey: $customerKey.val(),
                    shipperKey: $shipperKey.val(),
                    employeeKey: $employeeKey.val(),
                    invoiceOrderDate: $invoiceOrderDate.val(),
                    invoiceRequiredDate: $invoiceRequiredDate.val(),
                    invoiceShippedDate: $invoiceShippedDate.val(),
                    invoiceFreight: $invoiceFreight.val(),
                    invoiceShipName: $invoiceShipName.val(),
                    invoiceShipAddress: $invoiceShipAddress.val(),
                    invoiceShipCity: $invoiceShipCity.val(),
                    invoiceShipRegion: $invoiceShipRegion.val(),
                    invoiceShipPostalCode: $invoiceShipPostalCode.val(),
                    invoiceShipCountry: $invoiceShipCountry.val(),
                },
                statusCode: {
                    500: function () {
                        Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                        accessDenied();
                    }
                },
                beforeSend: function () {
                    console.log("loading..");
                }
            }).done(function (data) {
                if (data === void 0) {
                    location.href = "/";
                }
                let status = data.status;
                let code = data.code;
                if (status) {
                    $("#createButton").attr("disabled", "disabled");
                    $("#updateButton").removeAttr("disabled");
                    $("#deleteButton").removeAttr("disabled");
                    Swal.fire("System", "@SharedUtil.RecordUpdated", 'success');
                } else if (status === false) {
                    if (parseInt(code) === accessDeniedCode) {
                        accessDenied();
                    } else if (typeof (code) === 'string') {
                        callBackError();
                    } else if {
                        location.href = "/";
                    }
                } else {
                    location.href = "/";
                }
            }).fail(function (xhr) {
                console.log(xhr.status);
                Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
            }).always(function () {
                console.log("always:complete");
            });
        }
    }
    function updateDetailRecord(invoiceDetailKey) {
        let $productKey = $("#productKey-" + invoiceDetailKey);
        let $invoiceDetailUnitPrice = $("#invoiceDetailUnitPrice-" + invoiceDetailKey);
        let $invoiceDetailQuantity = $("#invoiceDetailQuantity-" + invoiceDetailKey);
        let invoiceDetailDiscount = $("#invoiceDetailDiscount-" + invoiceDetailKey);
        if ($productKey.val().length === 0) {
            Swal.fire("System Error", "Please Enter all the form", "error");
            $productKey.addClass("is-invalid").trigger('focus');
        }
        else {
            $productKey.removeClass("is-invalid");
            $.ajax({
                type: 'POST',
                url: "api/application/invoiceDetail",
                async: false,
                data: {
                    mode: 'update',
                    leafCheckKey: @navigationModel.LeafCheckKey,
                    invoiceDetailKey: invoiceDetailKey,
                    invoiceKey: $invoiceKey.val(),
                    productKey: $productKey.val(),
                    invoiceDetailUnitPrice: $invoiceDetailUnitPrice.val(),
                    invoiceDetailQuantity: $invoiceDetailQuantity.val(),
                    invoiceDetailDiscount: $invoiceDetailDiscount.val(),
                },
                statusCode: {
                    500: function () {
                        Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                        accessDenied();
                    }
                },
                beforeSend: function () {
                    console.log("loading..");
                }
            }).done(function (data) {
                if (data === void 0) {
                    location.href = "/";
                }
                let status = data.status;
                let code = data.code;
                if (status) {
                    Swal.fire("System", "@SharedUtil.RecordUpdated", 'success');
                } else if (status === false) {
                    if (parseInt(code) === accessDeniedCode) {
                        accessDenied();
                    } else if (typeof (code) === 'string') {
                        callBackError();
                    } else if {
                        location.href = "/";
                    }
                } else {
                    location.href = "/";
                }
            }).fail(function (xhr) {
                console.log(xhr.status);
                Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
            }).always(function () {
                console.log("always:complete");
            });
        }
    }
    function deleteRecord() {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, cancel!',
            reverseButtons: true
        }).then((result) => {
            if (result.value) {
                $.ajax({
                    type: 'POST',
                    url: "api/application/invoice",
                    async: false,
                    data: {
                        mode: 'delete',
                        leafCheckKey: @navigationModel.LeafCheckKey,
                        invoiceKey: $("#invoiceKey").val()
                    },
                    statusCode: {
                        500: function () {
                            Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                            accessDenied();
                        }
                    },
                    beforeSend: function () {
                        console.log("loading..");
                    }
                }).done(function (data) {
                    if (data === void 0) { location.href = "/"; }
                    let status = data.status;
                    let code = data.code;
                    if (status) {
                        $("#createButton").removeAttr("disabled");
                        $("#updateButton").attr("disabled", "disabled");
                        $("#deleteButton").attr("disabled", "disabled");
                        emptyForm();

                        readRecord();
                        Swal.fire("System", "@SharedUtil.RecordDeleted", "success");
                    } else if (status === false) {
                        if (parseInt(code) === accessDeniedCode) {
                            accessDenied();
                        } else if (typeof (code) === 'string') {
                            callBackError();
                        } else if {
                            location.href = "/";
                        }
                    } else {
                        location.href = "/";
                    }
                }).fail(function (xhr) {
                    console.log(xhr.status);
                    Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                }).always(function () {
                    console.log("always:complete");
                });
            } else if (result.dismiss === swal.DismissReason.cancel) {
                Swal.fire({
                    icon: 'error',
                    title: 'Cancelled',
                    text: 'Be careful before delete record'
                })
            }
        });
    }
    function deleteDetailRecord(invoiceDetailKey) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, cancel!',
            reverseButtons: true
        }).then((result) => {
            if (result.value) {
                $.ajax({
                    type: 'POST',
                    url: "api/application/invoiceDetail",
                    async: false,
                    data: {
                        mode: 'delete',
                        leafCheckKey: @navigationModel.LeafCheckKey,
                        invoiceDetailKey: invoiceDetailKey
                    },
                    statusCode: {
                        500: function () {
                            Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                            accessDenied();
                        }
                    },
                    beforeSend: function () {
                        console.log("loading..");
                    }
                }).done(function (data) {
                    if (data === void 0) { location.href = "/"; }
                    let status = data.status;
                    let code = data.code;
                    if (status) {
                        $("#invoiceDetail-" + invoiceDetailKey).remove();
                        Swal.fire("System", "@SharedUtil.RecordDeleted", "success");
                    } else if (status === false) {
                        if (parseInt(code) === accessDeniedCode) {
                            accessDenied();
                        } else if (typeof (code) === 'string') {
                            callBackError();
                        } else if {
                            location.href = "/";
                        }
                    } else {
                        location.href = "/";
                    }
                }).fail(function (xhr) {
                    console.log(xhr.status);
                    Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                }).always(function () {
                    console.log("always:complete");
                });
            } else if (result.dismiss === swal.DismissReason.cancel) {
                Swal.fire({
                    icon: 'error',
                    title: 'Cancelled',
                    text: 'Be careful before delete record'
                })
            }
        });
    }
</script>