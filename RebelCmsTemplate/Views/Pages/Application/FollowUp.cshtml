@inject IHttpContextAccessor _httpContextAccessor
@using RebelCmsTemplate.Models.Setting
@using RebelCmsTemplate.Repository.Setting;
@using RebelCmsTemplate.Util;
@using RebelCmsTemplate.Enum;
@{
    SharedUtil sharedUtils = new(_httpContextAccessor);
    List<FollowUpModel> followUpModels = new();
    try
    {
        FollowUpRepository followUpRepository = new(_httpContextAccessor);
        followUpModels = followUpRepository.Read();
    }
    catch (Exception ex)
    {
        sharedUtils.SetSystemException(ex);
    }
    var fileInfo = ViewContext.ExecutingFilePath?.Split("/");
    var filename = fileInfo != null ? fileInfo[4] : "";
    var name = filename.Split(".")[0];
    var navigationModel = sharedUtils.GetNavigation(name);
}

<div class="page-title">
    <div class="row">
        <div class="col-12 col-md-6 order-md-1 order-last">
            <h3>@navigationModel.LeafName</h3>
        </div>
        <div class="col-12 col-md-6 order-md-2 order-first">
            <nav aria-label="breadcrumb" class="breadcrumb-header float-start float-lg-end">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="#">
                            <i class="@navigationModel.FolderIcon"></i> @navigationModel.FolderName
                        </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        <i class="@navigationModel.LeafIcon"></i> @navigationModel.LeafName
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        <i class="fas fa-sign-out-alt"></i>
                        <a href="/logout">Logout</a>
                    </li>
                </ol>
            </nav>
        </div>
    </div>
</div>
<section class="content">
    <div class="container-fluid">
        <form class="form-horizontal">
            <div class="card card-primary">
                <div class="card-header">Filter</div>
                <div class="card-body">
                    <div class="form-group">
                        <div class="col-md-2">
                            <label for="search">Search</label>
                        </div>
                        <div class="col-md-10">
                            <input name="search" id="search" class="form-control"
                                   placeholder="Please Enter Name  Or Other Here" maxlength="64"
                                   style="width: 350px!important;"/>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <button type="button" class="btn btn-info" onclick="searchRecord()">
                        <i class="fas fa-filter"></i> Filter
                    </button>
                    &nbsp;
                    <button type="button" class="btn btn-warning" onclick="resetRecord()">
                        <i class="fas fa-power-off"></i> Reset
                    </button>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-md-12">&nbsp;</div>
            </div>
        </form>
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12">
                <div class="card">
                    <table class="table table-bordered table-striped table-condensed table-hover" id="tableData">
                        <thead>
                        <tr>
                            <td>
                                <label>
                                    <input type="text" name="followUpName" id="followUpName"
                                           class="form-control"/>
                                </label>
                            </td>
                            <td style="text-align: center">
                                <Button type="button" class="btn btn-info" onclick="createRecord()">
                                    <i class="fa fa-newspaper"></i>&nbsp;&nbsp;CREATE
                                </Button>
                            </td>
                        </tr>
                        <tr>
                            <th>Name</th>
                            <th style="width: 230px">Process</th>
                        </tr>
                        </thead>
                        <tbody id="tableBody">
                        @foreach (var row in followUpModels)
                        {
                            <tr id='followUp-@row.FollowUpKey'>
                                <td>
                                    <label>
                                        <input type="text" class="form-control" name="followUpName[]"
                                               id="followUpName-@row.FollowUpKey" value="@row.FollowUpName"/>
                                    </label>
                                </td>

                                <td style="text-align: center">
                                    <div class="btn-group">
                                        <Button type="button" class="btn btn-warning"
                                                onclick="updateRecord(@row.FollowUpKey)">
                                            <i class="fas fa-edit"></i>&nbsp;UPDATE
                                        </Button>
                                        &nbsp;
                                        <Button type="button" class="btn btn-danger"
                                                onclick="deleteRecord(@row.FollowUpKey)">
                                            <i class="fas fa-trash"></i>&nbsp;DELETE
                                        </Button>
                                    </div>
                                </td>
                            </tr>
                        }

                        @if (followUpModels.Count == 0)
                        {
                            <tr>
                                <td colspan="7" class="noRecord">
                                    @SharedUtil.NoRecord
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>


        </div>

    </div>
</section>
<script>
        function resetRecord() {
            readRecord();
            $("#search").val("");
        }
        function emptyTemplate() {
            return "" +
                "<tr>" +
                "<td colspan='4'>It's lonely here</td>" +
                "</tr>";
        }
        function template(followUpKey, followUpName) {
            return "" +
                "<tr id=\"followUp-" + followUpKey + "'>" +
                "<td>     " +
                "<label>" +
                "<input type='text' class='form-control' name='followUpName[]' id='followUpName-" + followUpKey + "' value='" + followUpName + "' />" +
                "</label>" +
                "</td>" +
                "<td style='text-align: center'><div class='btn-group'>" +
                "<Button type='button' class='btn btn-warning' onclick='updateRecord(" + followUpKey + ")'>" +
                "<i class='fas fa-edit'></i> UPDATE" +
                "</Button>" +
                "&nbsp;" +
                "<Button type='button' class='btn btn-danger' onclick='deleteRecord(" + followUpKey + ")'>" +
                "<i class='fas fa-trash'></i> DELETE" +
                "</Button>" +
                "</div></td>" +
                "</tr>" +
                "";
        }

        function createRecord() {
            const followUpName = $("#followUpName");
            $.ajax({
                type: 'POST',
                url: "api/administrator/followUp",
                async: false,
                data: {
                    mode: 'create',
                    leafCheckKey: @navigationModel.LeafCheckKey,
                    followUpName: followUpName.val()
                }, statusCode: {
                    500: function () {
                        Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                    }
                },
                beforeSend: function () {
                    console.log("loading ..");
                }}).done(function(data)  {
                    if (data === void 0) {
                        location.href = "/";
                    }
                    let status = data.status;
                         let code = data.code;
                    if (status) {
                        const lastInsertKey = data.lastInsertKey;
                        $("#tableBody").prepend(template(lastInsertKey, followUpName.val()));
                        Swal.fire({
                            title: 'Success!',
                            text: '@SharedUtil.RecordCreated',
                            icon: 'success',
                            confirmButtonText: 'Cool'
                        });
                        followUpName.val('');
                    } else if (status === false) {
                        if (typeof(code) === 'string'){
                                                    @{
                                                        if (sharedUtils.GetRoleId().Equals((int) AccessEnum.ADMINISTRATOR_ACCESS))
                                                        {
                                                            <text>
                                                            Swal.fire("Debugging Admin", code, "error");
                                                            </text>
                                                        }
                                                        else
                                                        {
                                                            <text>
                                                            Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                            </text>
                                                        }
                                                    }
                                                }else if (parseInt(code) === parseInt(@((int) ReturnCodeEnum.ACCESS_DENIED) )) {
                            let timerInterval
                            Swal.fire({
                                title: 'Auto close alert!',
                                html: 'Session Out .Pease Re-login.I will close in <b></b> milliseconds.',
                                timer: 2000,
                                timerProgressBar: true,
                                didOpen: () => {
                                    Swal.showLoading()
                                    const b = Swal.getHtmlContainer().querySelector('b')
                                    timerInterval = setInterval(() => {
                                        b.textContent = Swal.getTimerLeft()
                                    }, 100)
                                },
                                willClose: () => {
                                    clearInterval(timerInterval)
                                }
                            }).then((result) => {
                                if (result.dismiss === Swal.DismissReason.timer) {
                                    console.log('session out .. ');
                                    location.href = "/";
                                }
                            });
                        } else {
                            location.href = "/";
                        }
                    } else {
                        location.href = "/";
                    }
              }).fail(function(xhr)  {
                                                                     console.log(xhr.status)
                                                                     Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                                 }).always(function (){
                                                                     console.log("always:complete");    
                                                                 });
        }
        function readRecord() {
            let row = { followUpKey: "", folderName: "" }
            $.ajax({
                type: "post",
                url: "api/administrator/followUp",
                async: false,
                contentType: "application/x-www-form-urlencoded",
                data: {
                    mode: "read",
                    leafCheckKey: @navigationModel.LeafCheckKey,
                }, statusCode: {
                    500: function () {
                        Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                    }
                }, beforeSend() {
                    console.log("loading ..");
                }}).done(function(data)  {
                    if (data === void 0) {
                        location.href = "/";
                    }
                    let status = data.status;
                         let code = data.code;
                    if (status) {
                        if (data.data === void 0) {
                            $("#tableBody").html("").html(emptyTemplate());
                        } else {
                            if (data.data.length > 0) {
                                let templateStringBuilder = "";
                                for (let i = 0; i < data.data.length; i++) {
                                    row = data.data[i];
                                    templateStringBuilder += template(row.followUpKey, row.followUpName);
                                }
                                $("#tableBody").html("").html(templateStringBuilder);
                            } else {
                                $("#tableBody").html("").html(emptyTemplate());
                            }
                        }
                    } else if (status === false) {
                       if (typeof(code) === 'string'){
                                                   @{
                                                       if (sharedUtils.GetRoleId().Equals((int) AccessEnum.ADMINISTRATOR_ACCESS))
                                                       {
                                                           <text>
                                                           Swal.fire("Debugging Admin", code, "error");
                                                           </text>
                                                       }
                                                       else
                                                       {
                                                           <text>
                                                           Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                           </text>
                                                       }
                                                   }
                                               }else  if (parseInt(code) === parseInt(@((int) ReturnCodeEnum.ACCESS_DENIED) )) {
                            let timerInterval
                            Swal.fire({
                                title: 'Auto close alert!',
                                html: 'Session Out .Pease Re-login.I will close in <b></b> milliseconds.',
                                timer: 2000,
                                timerProgressBar: true,
                                didOpen: () => {
                                    Swal.showLoading()
                                    const b = Swal.getHtmlContainer().querySelector('b')
                                    timerInterval = setInterval(() => {
                                        b.textContent = Swal.getTimerLeft()
                                    }, 100)
                                },
                                willClose: () => {
                                    clearInterval(timerInterval)
                                }
                            }).then((result) => {
                                if (result.dismiss === Swal.DismissReason.timer) {
                                    console.log('session out .. ');
                                    location.href = "/";
                                }
                            });
                        } else {
                            location.href = "/";
                        }
                    } else {
                        location.href = "/";
                    }
             }).fail(function(xhr)  {
                                                                    console.log(xhr.status)
                                                                    Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                                }).always(function (){
                                                                    console.log("always:complete");    
                                                                });
        }
        function searchRecord() {
            let row = { followUpKey: "", folderName: "" }
            $.ajax({
                type: "post",
                url: "api/administrator/followUp",
                async: false,
                contentType: "application/x-www-form-urlencoded",
                data: {
                    mode: "search",
                    leafCheckKey: @navigationModel.LeafCheckKey,
                    search: $("#search").val()
                }, statusCode: {
                    500: function () {
                        Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                    }
                }, beforeSend() {
                    console.log("loading ..");
                }}).done(function(data)  {
                    if (data === void 0) {
                        location.href = "/";
                    }
                    let status = data.status;
                         let code = data.code;
                    if (status) {
                        if (data.data === void 0) {
                            $("#tableBody").html("").html(emptyTemplate());
                        } else {
                            if (data.data.length > 0) {
                                let templateStringBuilder = "";
                                for (let i = 0; i < data.data.length; i++) {
                                    row = data.data[i];
                                    templateStringBuilder += template(row.followUpKey, row.followUpName);
                                }
                                $("#tableBody").html("").html(templateStringBuilder);
                            }
                        }
                    } else if (status === false) {
                     if (typeof(code) === 'string'){
                                                 @{
                                                     if (sharedUtils.GetRoleId().Equals((int) AccessEnum.ADMINISTRATOR_ACCESS))
                                                     {
                                                         <text>
                                                         Swal.fire("Debugging Admin", code, "error");
                                                         </text>
                                                     }
                                                     else
                                                     {
                                                         <text>
                                                         Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                         </text>
                                                     }
                                                 }
                                             }else    if (parseInt(code) === parseInt(@((int) ReturnCodeEnum.ACCESS_DENIED) )) {
                            let timerInterval
                            Swal.fire({
                                title: 'Auto close alert!',
                                html: 'Session Out .Pease Re-login.I will close in <b></b> milliseconds.',
                                timer: 2000,
                                timerProgressBar: true,
                                didOpen: () => {
                                    Swal.showLoading()
                                    const b = Swal.getHtmlContainer().querySelector('b')
                                    timerInterval = setInterval(() => {
                                        b.textContent = Swal.getTimerLeft()
                                    }, 100)
                                },
                                willClose: () => {
                                    clearInterval(timerInterval)
                                }
                            }).then((result) => {
                                
                                if (result.dismiss === Swal.DismissReason.timer) {
                                    console.log('session out .. ');
                                    location.href = "/";
                                }
                            });
                        } else {
                            location.href = "/";
                        }
                    } else {
                        location.href = "/";
                    }
          }).fail(function(xhr)  {
                                                                 console.log(xhr.status)
                                                                 Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                             }).always(function (){
                                                                 console.log("always:complete");    
                                                             });
        }
        function updateRecord(followUpKey) {
            $.ajax({
                type: 'POST',
                url: "api/administrator/followUp",
                async: false,
                data: {
                    mode: 'update',
                    leafCheckKey: @navigationModel.LeafCheckKey,
                    followUpKey: followUpKey,
                    followUpName: $("#followUpName-" + followUpKey).val()
                }, statusCode: {
                    500: function () {
                        Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                    }
                },
                beforeSend: function () {
                    console.log("loading..");
                }}).done(function(data)  {
                    if (data === void 0) {
                        location.href = "/";
                    }
                    let status = data.status;
                         let code = data.code;
                    if (status) {
                        Swal.fire("System", "@SharedUtil.RecordUpdated", 'success')
                    } else if (status === false) {
                      if (typeof(code) === 'string'){
                                                  @{
                                                      if (sharedUtils.GetRoleId().Equals((int) AccessEnum.ADMINISTRATOR_ACCESS))
                                                      {
                                                          <text>
                                                          Swal.fire("Debugging Admin", code, "error");
                                                          </text>
                                                      }
                                                      else
                                                      {
                                                          <text>
                                                          Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                          </text>
                                                      }
                                                  }
                                              }else   if (parseInt(code) === parseInt(@((int) ReturnCodeEnum.ACCESS_DENIED) )) {
                            let timerInterval
                            Swal.fire({
                                title: 'Auto close alert!',
                                html: 'Session Out .Pease Re-login.I will close in <b></b> milliseconds.',
                                timer: 2000,
                                timerProgressBar: true,
                                didOpen: () => {
                                    Swal.showLoading()
                                    const b = Swal.getHtmlContainer().querySelector('b')
                                    timerInterval = setInterval(() => {
                                        b.textContent = Swal.getTimerLeft()
                                    }, 100)
                                },
                                willClose: () => {
                                    clearInterval(timerInterval)
                                }
                            }).then((result) => {
                                if (result.dismiss === Swal.DismissReason.timer) {
                                    console.log('session out .. ');
                                    location.href = "/";
                                }
                            });
                        } else {
                            location.href = "/";
                        }
                    } else {
                        location.href = "/";
                    }
              }).fail(function(xhr)  {
                                                                     console.log(xhr.status)
                                                                     Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                                 }).always(function (){
                                                                     console.log("always:complete");    
                                                                 });
        }
        function deleteRecord(followUpKey) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'No, cancel!',
                reverseButtons: true
            }).then((result) => {
                if (result.value) {
                    $.ajax({
                        type: 'POST',
                        url: "api/administrator/followUp",
                        async: false,
                        data: {
                            mode: 'delete',
                            leafCheckKey: @navigationModel.LeafCheckKey,
                            followUpKey: followUpKey
                        }, statusCode: {
                            500: function () {
                                Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                            }
                        },
                        beforeSend: function () {
                            console.log("loading..");
                        }}).done(function(data)  {
                            if (data === void 0) {
                                location.href = "/";
                            }
                            let status = data.status;
                            let code = data.code;
                            if (status) {
                                $("#followUp-" + followUpKey).remove();
                                Swal.fire("System", "@SharedUtil.RecordDeleted", "success");
                            } else if (status === false) {
                            if (typeof(code) === 'string'){
                                                        @{
                                                            if (sharedUtils.GetRoleId().Equals((int) AccessEnum.ADMINISTRATOR_ACCESS))
                                                            {
                                                                <text>
                                                                Swal.fire("Debugging Admin", code, "error");
                                                                </text>
                                                            }
                                                            else
                                                            {
                                                                <text>
                                                                Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                                </text>
                                                            }
                                                        }
                                                    }else     if (parseInt(code) === parseInt(@((int) ReturnCodeEnum.ACCESS_DENIED) )) {
                                    let timerInterval
                                    Swal.fire({
                                        title: 'Auto close alert!',
                                        html: 'Session Out .Pease Re-login.I will close in <b></b> milliseconds.',
                                        timer: 2000,
                                        timerProgressBar: true,
                                        didOpen: () => {
                                            Swal.showLoading()
                                            const b = Swal.getHtmlContainer().querySelector('b')
                                            timerInterval = setInterval(() => {
                                                b.textContent = Swal.getTimerLeft()
                                            }, 100)
                                        },
                                        willClose: () => {
                                            clearInterval(timerInterval)
                                        }
                                    }).then((result) => {
                                        
                                        if (result.dismiss === Swal.DismissReason.timer) {
                                            console.log('session out .. ');
                                            location.href = "/";
                                        }
                                    });
                                } else {
                                    location.href = "/";
                                }
                            } else {
                                location.href = "/";
                            }
                  }).fail(function(xhr)  {
                                                                         console.log(xhr.status)
                                                                         Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                                     }).always(function (){
                                                                         console.log("always:complete");    
                                                                     });
                } else if (result.dismiss === swal.DismissReason.cancel) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Cancelled',
                        text: 'Be careful before delete record'
                    })
                }
            });

        }
    </script>