@inject Microsoft.AspNetCore.Http.IHttpContextAccessor _httpContextAccessor
@using RebelCmsTemplate.Models.Setting
@using RebelCmsTemplate.Models.Shared
@using RebelCmsTemplate.Repository.Setting
@using RebelCmsTemplate.Util
@using RebelCmsTemplate.Enum;
@{
    SharedUtil sharedUtils = new(_httpContextAccessor);
    List<DocumentNumberModel> documentNumberModels = new();
    try
    {
        DocumentNumberRepository documentNumberRepository = new(_httpContextAccessor);
        documentNumberModels = documentNumberRepository.Read();
    }
    catch (Exception ex)
    {
        sharedUtils.SetSystemException(ex);
    }
    var fileInfo = ViewContext.ExecutingFilePath?.Split("/");
    var filename = fileInfo != null ? fileInfo[4] : "";
    var name = filename.Split(".")[0];
    NavigationModel navigationModel = sharedUtils.GetNavigation(name);
}

    <div class="page-title">
        <div class="row">
            <div class="col-12 col-md-6 order-md-1 order-last">
                <h3>@navigationModel.LeafName</h3>
            </div>
            <div class="col-12 col-md-6 order-md-2 order-first">
                <nav aria-label="breadcrumb" class="breadcrumb-header float-start float-lg-end">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item">
                            <a href="#">
                                <i class="@navigationModel.FolderIcon"></i> @navigationModel.FolderName
                            </a>
                        </li>
                        <li class="breadcrumb-item active" aria-current="page">
                            <i class="@navigationModel.LeafIcon"></i> @navigationModel.LeafName
                        </li>
                        <li class="breadcrumb-item active" aria-current="page">
                            <i class="fas fa-sign-out-alt"></i>
                            <a href="/logout">Logout</a>
                        </li>
                    </ol>
                </nav>
            </div>
        </div>
    </div>
    <section class="content">
        <div class="container-fluid">
               <form class="form-horizontal">
                            <div class="card card-primary">
                                <div class="card-header">Filter</div>
                                <div class="card-body">
            
                                    <div class="form-group">
                                        <div class="col-md-2">
                                            <label for="search">Search</label>
                                        </div>
                                        <div class="col-md-10">
                                            <input name="search" id="search" class="form-control"
                                                placeholder="Please Enter Name  Or Other Here" maxlength="64"
                                                style="width: 350px!important;" />
                                        </div>
                                    </div>
                                </div>
                                <div class="card-footer">
                                    <button type="button" class="btn btn-info" onclick="searchRecord()">
                                        <i class="fas fa-filter"></i> Filter
                                    </button>
                                    &nbsp;
                                    <button type="button" class="btn btn-warning" onclick="resetRecord()">
                                        <i class="fas fa-power-off"></i> Reset
                                    </button>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xs-12 col-sm-12 col-md-12">&nbsp;</div>
                            </div>
                        </form>
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-md-12">
                    <div class="card">
                        <table class="table table-bordered table-striped table-condensed table-hover" id="tableData">
                            <thead>
                            <tr>
                                <td>
                                    <label>
                                        <input type="text" name="documentNumberCode" id="documentNumberCode"
                                               class="form-control"/>
                                    </label>
                                </td>
                                <td>
                                    <label>
                                        <input type="text" name="documentNumber" id="documentNumber"
                                               class="form-control"/>
                                    </label>
                                </td>
                                <td>
                                    <label>
                                        <input type="text" name="documentNumberDescription"
                                               id="documentNumberDescription" class="form-control"/>
                                    </label>
                                </td>

                                <td style="text-align: center">
                                    <Button type="button" class="btn btn-info" onclick="createRecord()">
                                        <i class="fa fa-newspaper"></i>&nbsp;&nbsp;CREATE
                                    </Button>
                                </td>
                            </tr>
                            <tr>
                                <th>Document Code</th>
                                <th>Current</th>
                                <th>Description</th>
                                <th style="width: 250px">Process</th>
                            </tr>
                            </thead>
                            <tbody id="tableBody">
                            @foreach (var row in documentNumberModels)
                            {
                                <tr id='documentNumber-@row.DocumentNumberKey'>
                                    <td class="tdNormalAlign">
                                        <label>
                                            <input type="text" class="form-control" name="documentNumberCode[]"
                                                   id="documentNumberCode-@row.DocumentNumberKey"
                                                   value="@row.DocumentNumberCode"/>
                                        </label>
                                    </td>
                                    <td class="tdNormalAlign">
                                        <label>
                                            <input type="text" class="form-control" name="documentNumber[]"
                                                   id="documentNumber-@row.DocumentNumberKey"
                                                   value='@row.DocumentNumber'/>
                                        </label>
                                    </td>
                                    <td class="tdNormalAlign">
                                        <label>
                                            <input type="text" class="form-control" name="documentNumberDescription[]"
                                                   id="documentNumberDescription-@row.DocumentNumberKey"
                                                   value="@row.DocumentNumberDescription"/>
                                        </label>
                                    </td>
                                    <td style='text-align: center'>
                                        <div class="btn-group">
                                            <Button type="button" class="btn btn-warning"
                                                    onclick='updateRecord(@row.DocumentNumberKey)'>
                                                <i class="fas fa-edit"></i>&nbsp;UPDATE
                                            </Button>
                                            <Button type="button" class="btn btn-danger"
                                                    onclick='deleteRecord(@row.DocumentNumberKey)'>
                                                <i class="fas fa-trash"></i>&nbsp;DELETE
                                            </Button>
                                        </div>
                                    </td>
                                </tr>
                            }

                            @if (documentNumberModels.Count == 0)
                            {
                                <tr>
                                    <td colspan="7" class="noRecord">
                                        @SharedUtil.NoRecord
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                </div>


            </div>

        </div>
    </section>

    <script>
        function resetRecord() {
            readRecord();
            $("#search").val("");
        }
        function emptyTemplate() {
            return "" +
                "<tr>" +
                "<td colspan=\"4\">It's lonely here</td>" +
                "</tr>";
        }
        function template(documentNumberId, documentNumberCode, documentNumber, documentNumberDescription) {

            return "" +
                "<tr id='documentNumber-" + documentNumberId + "'>" +

                "<td>     " +
                "<label>" +
                "<input type='text' class='form-control' id='documentNumberCode-" + documentNumberId + "' value='" + documentNumberCode + "' />" +
                "</label>" +
                "</td>" +

                "<td>     " +
                "<label>" +
                "<input type='text' class='form-control' id='documentNumber-" + documentNumberId + "' value='" + documentNumber + "' />" +
                "</label>" +
                "</td>" +

                "<td>     " +
                "<label>" +
                "<input type='text' class='form-control' id='documentNumberDescription-" + documentNumberId + "' value='" + documentNumberDescription + "' />" +
                "</label>" +
                "</td>" +

                "<td style='text-align: center'><div class='btn-group'>" +
                "<Button type='button' class='btn btn-warning' onclick='updateRecord(" + documentNumberId + ")'>" +
                "<i class='fas fa-edit'></i> UPDATE" +
                "</Button>" +
                "&nbsp;" +
                "<Button type='button' class='btn btn-danger' onclick='deleteRecord(" + documentNumberId + ")'>" +
                "<i class='fas fa-trash'></i> DELETE" +
                "</Button>" +
                "</div></td>" +
                "</tr>" +
                "";
        }
        function createRecord() {
            const $documentNumberCode = $("#documentNumberCode");
            const $documentNumber = $("#documentNumber");
            const $documentNumberDescription = $("#documentNumberDescription");
            $.ajax({
                type: 'POST',
                url: "api/setting/documentNumber",
                async: false,
                data: {
                    mode: 'create',
                    leafCheckKey: @navigationModel.LeafCheckKey,
                    documentNumberCode: $documentNumberCode.val(),
                    documentNumber: $documentNumber.val(),
                    documentNumberDescription: $documentNumberDescription.val(),
                }, statusCode: {
                    500: function () {
                        Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                    }
                },
                beforeSend: function () {
                    console.log("loading ..");
                }}).done(function(data)  {
                    if (data === void 0) {
                        location.href = "/";
                    }
                    let status = data.status;
                     let code = data.code;
                    if (status) {
                        const lastInsertKey = data.lastInsertKey;
                        $("#tableBody").prepend(template(lastInsertKey, $documentNumberCode.val(), $documentNumber.val(), $documentNumberDescription.val()));

                        Swal.fire({
                            title: 'Success!',
                            text: '@SharedUtil.RecordCreated',
                            icon: 'success',
                            confirmButtonText: 'Cool'
                        });

                        $documentNumberCode.val('');
                        $documentNumber.val('');
                        $documentNumberDescription.val('');
                    } else if (status === false) {
                       if (typeof(code) === 'string'){
                           @{
                               if (sharedUtils.GetRoleId().Equals( (int)AccessEnum.ADMINISTRATOR_ACCESS ))
                               {
                                   <text>
                                   Swal.fire("Debugging Admin", code, "error");
                                   </text>
                               }
                               else
                               {
                                   <text>
                                   Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                   </text>
                               }
                           }
                       }else  if (parseInt(code) === parseInt(@((int)ReturnCodeEnum.ACCESS_DENIED) )) {
                            let timerInterval
                            Swal.fire({
                                title: 'Auto close alert!',
                                html: 'Session Out .Pease Re-login.I will close in <b></b> milliseconds.',
                                timer: 2000,
                                timerProgressBar: true,
                                didOpen: () => {
                                    Swal.showLoading()
                                    const b = Swal.getHtmlContainer().querySelector('b')
                                    timerInterval = setInterval(() => {
                                        b.textContent = Swal.getTimerLeft()
                                    }, 100)
                                },
                                willClose: () => {
                                    clearInterval(timerInterval)
                                }
                            }).then((result) => {
                                
                                if (result.dismiss === Swal.DismissReason.timer) {
                                    console.log('session out .. ');
                                    location.href = "/";
                                }
                            });
                        } else {
                            location.href = "/";
                        }
                    } else {
                        location.href = "/";
                    }
                          }).fail(function(xhr)  {
                                                             console.log(xhr.status)
                                                             Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                         }).always(function (){
                                                             console.log("always:complete");    
                                                         });
        }
        function readRecord() {
            $.ajax({
                type: "post",
                url: "api/setting/documentNumber",
                async: false,
                contentType: "application/x-www-form-urlencoded",
                data: {
                    mode: "read",
                    leafCheckKey: @navigationModel.LeafCheckKey
                    }, beforeSend() {
                    console.log("loading ..");
                }, statusCode: {
                    500: function () {
                        Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                    }
                }}).done(function(data)  {
                    if (data === void 0) {
                        location.href = "/";
                    }
                    let status = data.status;
                     let code = data.code;
                    if (status) {
                        if (data.data === void 0) {
                            $("#tableBody").html("").html(emptyTemplate());
                        } else {
                            if (data.data.length > 0) {
                                let templateStringBuilder = "";
                                for (let i = 0; i < data.data.length; i++) {
                                    const row = data.data[i];
                                    templateStringBuilder += template(row.documentNumberId, row.documentNumberCode, row.documentNumber, row.documentNumberDescription);
                                }
                                $("#tableBody").html("").html(templateStringBuilder);
                            } else {
                                $("#tableBody").html("").html(emptyTemplate());
                            }
                        }
                    } else if (status === false) {
                      if (typeof(code) === 'string'){
                                                  @{
                                                      if (sharedUtils.GetRoleId().Equals( (int)AccessEnum.ADMINISTRATOR_ACCESS ))
                                                      {
                                                          <text>
                                                          Swal.fire("Debugging Admin", code, "error");
                                                          </text>
                                                      }
                                                      else
                                                      {
                                                          <text>
                                                          Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                          </text>
                                                      }
                                                  }
                                              }else   if (parseInt(code) === parseInt(@((int)ReturnCodeEnum.ACCESS_DENIED) )) {
                            let timerInterval
                            Swal.fire({
                                title: 'Auto close alert!',
                                html: 'Session Out .Pease Re-login.I will close in <b></b> milliseconds.',
                                timer: 2000,
                                timerProgressBar: true,
                                didOpen: () => {
                                    Swal.showLoading()
                                    const b = Swal.getHtmlContainer().querySelector('b')
                                    timerInterval = setInterval(() => {
                                        b.textContent = Swal.getTimerLeft()
                                    }, 100)
                                },
                                willClose: () => {
                                    clearInterval(timerInterval)
                                }
                            }).then((result) => {
                                
                                if (result.dismiss === Swal.DismissReason.timer) {
                                    console.log('session out .. ');
                                    location.href = "/";
                                }
                            });
                        } else {
                            location.href = "/";
                        }
                    } else {
                        location.href = "/";
                    }
           }).fail(function(xhr)  {
                                                                  console.log(xhr.status)
                                                                  Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                              }).always(function (){
                                                                  console.log("always:complete");    
                                                              });
        }
        function searchRecord() {
            $.ajax({
                type: "post",
                url: "api/setting/documentNumber",
                async: false,
                contentType: "application/x-www-form-urlencoded",
                data: {
                    mode: "search",
                    leafCheckKey: @navigationModel.LeafCheckKey,
                    search: $("#search").val()
                }, statusCode: {
                    500: function () {
                        Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                    }
                }, beforeSend() {
                    console.log("loading ..");
                }}).done(function(data)  {
                    if (data === void 0) {
                        location.href = "/";
                    }
                    let status = data.status;
                     let code = data.code;
                    if (status) {
                        if (data === void 0) {
                            $("#tableBody").html("").html(emptyTemplate());
                        }

                        if (data.data.length > 0) {
                            let templateStringBuilder = "";
                            for (let i = 0; i < data.data.length; i++) {
                                const row = data.data[i];

                                templateStringBuilder += template(row.documentNumberId, row.documentNumberCode, row.documentNumber, row.documentNumberDescription);
                            }
                            $("#tableBody").html("").html(templateStringBuilder);
                        }
                    
                } else if(status === false) {
              if (typeof(code) === 'string'){
                                          @{
                                              if (sharedUtils.GetRoleId().Equals( (int)AccessEnum.ADMINISTRATOR_ACCESS ))
                                              {
                                                  <text>
                                                  Swal.fire("Debugging Admin", code, "error");
                                                  </text>
                                              }
                                              else
                                              {
                                                  <text>
                                                  Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                  </text>
                                              }
                                          }
                                      }else   if (parseInt(code) === parseInt(@((int)ReturnCodeEnum.ACCESS_DENIED) )) {
                    let timerInterval
                    Swal.fire({
                        title: 'Auto close alert!',
                        html: 'Session Out .Pease Re-login.I will close in <b></b> milliseconds.',
                        timer: 2000,
                        timerProgressBar: true,
                        didOpen: () => {
                            Swal.showLoading()
                            const b = Swal.getHtmlContainer().querySelector('b')
                            timerInterval = setInterval(() => {
                                b.textContent = Swal.getTimerLeft()
                            }, 100)
                        },
                        willClose: () => {
                            clearInterval(timerInterval)
                        }
                    }).then((result) => {
                        if (result.dismiss === Swal.DismissReason.timer) {
                            console.log('session out .. ');
                            location.href = "/";
                        }
                    });
                } else {
                    location.href = "/";
                }
            } else {
                location.href = "/";
            }
                     }).fail(function(xhr)  {
                                                        console.log(xhr.status)
                                                        Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                    }).always(function (){
                                                        console.log("always:complete");    
                                                    });
        }
        function updateRecord(documentNumberId) {
            $.ajax({
                type: 'POST',
                url: "api/setting/documentNumber",
                async: false,
                data: {
                    mode: 'update',
                    leafCheckKey: @navigationModel.LeafCheckKey,
                    documentNumberId: documentNumberId,
                    documentNumberCode: $("#documentNumberCode-" + documentNumberId).val(),
                    documentNumber: $("#documentNumber-" + documentNumberId).val(),
                    documentNumberDescription: $("#documentNumberDescription-" + documentNumberId).val(),
                }, statusCode: {
                    500: function () {
                        Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                    }
                },
                beforeSend: function () {
                    console.log("Loading..");
                }}).done(function(data)  {
                    if (data === void 0) {
                        location.href = "/";
                    }
                    let status = data.status;
                     let code = data.code;
                    if (status) {
                        Swal.fire("System", "@SharedUtil.RecordUpdated", 'success')
                    } else if (status === false) {
                     if (typeof(code) === 'string'){
                                                 @{
                                                     if (sharedUtils.GetRoleId().Equals( (int)AccessEnum.ADMINISTRATOR_ACCESS ))
                                                     {
                                                         <text>
                                                         Swal.fire("Debugging Admin", code, "error");
                                                         </text>
                                                     }
                                                     else
                                                     {
                                                         <text>
                                                         Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                         </text>
                                                     }
                                                 }
                                             }else    if (parseInt(code) === parseInt(@((int)ReturnCodeEnum.ACCESS_DENIED) )) {
                            let timerInterval
                            Swal.fire({
                                title: 'Auto close alert!',
                                html: 'Session Out .Pease Re-login.I will close in <b></b> milliseconds.',
                                timer: 2000,
                                timerProgressBar: true,
                                didOpen: () => {
                                    Swal.showLoading()
                                    const b = Swal.getHtmlContainer().querySelector('b')
                                    timerInterval = setInterval(() => {
                                        b.textContent = Swal.getTimerLeft()
                                    }, 100)
                                },
                                willClose: () => {
                                    clearInterval(timerInterval)
                                }
                            }).then((result) => {
                                
                                if (result.dismiss === Swal.DismissReason.timer) {
                                    console.log('session out .. ');
                                    location.href = "/";
                                }
                            });
                        } else {
                            location.href = "/";
                        }
                    } else {
                        location.href = "/";
                    }
                          }).fail(function(xhr)  {
                                                             console.log(xhr.status)
                                                             Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                         }).always(function (){
                                                             console.log("always:complete");    
                                                         });
        }
        function deleteRecord(documentNumberId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                type: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'No, cancel!',
                reverseButtons: true
            }).then((result) => {
                if (result.value) {

                    $.ajax({
                        type: 'POST',
                        url: "api/setting/documentNumber",
                        async: false,
                        data: {
                            mode: 'delete',
                            leafCheckKey: @navigationModel.LeafCheckKey,
                            documentNumberId: documentNumberId
                        }, statusCode: {
                            500: function () {
                                Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                            }
                        },
                        beforeSend: function () {
                            console.log("loading..");
                        }}).done(function(data)  {
                            if (data === void 0) {
                                location.href = "/";
                            }
                            let status = data.status;
                             let code = data.code;
                            if (status) {
                                $("#documentNumber-" + documentNumberId).remove();
                                Swal.fire("System", "@SharedUtil.RecordDeleted", "success");
                            } else if (status === false) {
                               if (typeof(code) === 'string'){
                                                           @{
                                                               if (sharedUtils.GetRoleId().Equals( (int)AccessEnum.ADMINISTRATOR_ACCESS ))
                                                               {
                                                                   <text>
                                                                   Swal.fire("Debugging Admin", code, "error");
                                                                   </text>
                                                               }
                                                               else
                                                               {
                                                                   <text>
                                                                   Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                                   </text>
                                                               }
                                                           }
                                                       }else  if (parseInt(code) === parseInt(@((int)ReturnCodeEnum.ACCESS_DENIED) )) {
                                    let timerInterval
                                    Swal.fire({
                                        title: 'Auto close alert!',
                                        html: 'Session Out .Pease Re-login.I will close in <b></b> milliseconds.',
                                        timer: 2000,
                                        timerProgressBar: true,
                                        didOpen: () => {
                                            Swal.showLoading()
                                            const b = Swal.getHtmlContainer().querySelector('b')
                                            timerInterval = setInterval(() => {
                                                b.textContent = Swal.getTimerLeft()
                                            }, 100)
                                        },
                                        willClose: () => {
                                            clearInterval(timerInterval)
                                        }
                                    }).then((result) => {
                                        if (result.dismiss === Swal.DismissReason.timer) {
                                            console.log('session out .. ');
                                            location.href = "/";
                                        }
                                    });
                                } else {
                                    location.href = "/";
                                }
                            } else {
                                location.href = "/";
                            }
                                     }).fail(function(xhr)  {
                                                                        console.log(xhr.status)
                                                                        Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                                                                    }).always(function (){
                                                                        console.log("always:complete");    
                                                                    });
                } else if (result.dismiss === swal.DismissReason.cancel) {
                    swal(
                        'Cancelled',
                        'Be careful before delete record',
                        'error'
                    )
                }
            });

        }
    </script>
