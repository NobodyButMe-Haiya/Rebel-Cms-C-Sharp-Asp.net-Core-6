@inject Microsoft.AspNetCore.Http.IHttpContextAccessor _httpContextAccessor
@using RebelCmsTemplate.Models.Administrator
@using RebelCmsTemplate.Models.Shared
@using RebelCmsTemplate.Repository.Administrator;
@using RebelCmsTemplate.Util;
@using RebelCmsTemplate.Enum;
@{
    SharedUtil sharedUtils = new(_httpContextAccessor);
    List<ConfigurationModel> configurationModels = new();
    try
    {
        ConfigurationRepository configurationRepository = new(_httpContextAccessor);
        configurationModels = configurationRepository.Read();
    }
    catch (Exception ex)
    {
        sharedUtils.SetSystemException(ex);
    }
    var fileInfo = ViewContext.ExecutingFilePath?.Split("/");
    var filename = fileInfo != null ? fileInfo[4] : "";
    var name = filename.Split(".")[0];
    NavigationModel navigationModel = sharedUtils.GetNavigation(name);
}

    <div class="page-title">
        <div class="row">
            <div class="col-12 col-md-6 order-md-1 order-last">
                <h3>@navigationModel.LeafName</h3>
            </div>
            <div class="col-12 col-md-6 order-md-2 order-first">
                <nav aria-label="breadcrumb" class="breadcrumb-header float-start float-lg-end">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item">
                            <a href="#">
                                <i class="@navigationModel.FolderIcon"></i>
                                @navigationModel.FolderName
                            </a>
                        </li>
                        <li class="breadcrumb-item active" aria-current="page">
                            <i class="@navigationModel.LeafIcon"></i>
                            @navigationModel.LeafName
                        </li>
                        <li class="breadcrumb-item active" aria-current="page">
                            <i class="fas fa-sign-out-alt"></i>
                            <a href="/logout">Logout</a>
                        </li>
                    </ol>
                </nav>
            </div>
        </div>
    </div>
    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-md-12">&nbsp;</div>
            </div>
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-md-12">
                    <div class="card">
                        <table class="table table-bordered table-striped table-condensed table-hover" id="tableData">
                            @foreach (var row in configurationModels)
                            {
                                <tr>
                                    <th>Email Host</th>
                                    <th>Email</th>
                                    <th>Email Password</th>
                                    <th>Email Port</th>
                                    <th>Email Secures</th>
                                </tr>
                                <tr>
                                    <td>
                                        <input type="hidden" id="configurationKey" value="@row.ConfigurationKey" />
                                        <label>
                                            <input type="text" class="form-control" id='configurationEmailHost'
                                            value='@row.ConfigurationEmailHost' />
                                        </label>
                                    </td>
                                    <td>
                                        <label>
                                            <input type="text" class="form-control" id='configurationEmail'
                                            value='@row.ConfigurationEmail' />
                                        </label>
                                    </td>
                                    <td>
                                        <label>
                                            <input type="text" class="form-control" id='configurationEmailPassword'
                                            value='@row.ConfigurationEmailPassword' />
                                        </label>
                                    </td>
                                    <td>
                                        <label>
                                            <input type="text" class="form-control" id='configurationEmailPort'
                                            value='@row.ConfigurationEmailPort' />
                                        </label>
                                    </td>
                                    <td>
                                        <label>
                                            <input type="text" class="form-control" id='configurationEmailSecure'
                                            value='@row.ConfigurationEmailSecure' />
                                        </label>
                                    </td>
                                </tr>
                                <tr>
                                    <td style='text-align: center' colspan="4">
                                        <Button type="button" class="btn btn-warning"
                                        onclick='updateRecord(@row.ConfigurationKey)'>
                                            <i class="fas fa-edit"></i>&nbsp;UPDATE
                                        </Button>
                                    </td>
                                </tr>
                            }
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <script>
        function updateRecord() {
            $.ajax({
                type: 'POST',
                url: "api/administrator/configuration",
                async: false,
                data: {
                    mode: 'update',
                    leafCheckKey: @navigationModel.LeafCheckKey,
                    configurationKey: $("#configurationKey").val(),
                    configurationPortal: $("#configurationPortal").val(),
                    configurationPortalLocal: $("#configurationPortalLocal").val(),
                    configurationEmailHost: $("#configurationEmailHost").val(),
                    configurationEmail: $("#configurationEmail").val(),
                    configurationEmailPassword: $("#configurationEmailPassword").val(),
                    configurationEmailPort: $("#configurationEmailPort").val(),
                    configurationEmailSecure: $("#configurationEmailSecure").val()
                }, statusCode: {
                    500: function () {
                        Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                    }
                },
                beforeSend: function () {
                    console.log("loading..");
                }
            }).done(function (data) {
                if (data === void 0) {
                    location.href = "/";
                }
                let status = data.status;
                     let code = data.code;
                if (status) {
                    Swal.fire("System", "@SharedUtil.RecordUpdated", 'success')
                } else if (status === false) {
                 if (typeof(code) === 'string'){
                    @{
                        if (sharedUtils.GetRoleId().Equals( (int)AccessEnum.ADMINISTRATOR_ACCESS ))
                        {
                            <text>
                            Swal.fire("Debugging Admin", code, "error");
                            </text>
                        }
                        else
                        {
                            <text>
                            Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                            </text>
                        }
                    }
                }else    if (parseInt(code) === parseInt(@((int)ReturnCodeEnum.ACCESS_DENIED) )) {
                        let timerInterval
                        Swal.fire({
                            title: 'Auto close alert!',
                            html: 'Session Out .Pease Re-login.I will close in <b></b> milliseconds.',
                            timer: 2000,
                            timerProgressBar: true,
                            didOpen: () => {
                                Swal.showLoading()
                                const b = Swal.getHtmlContainer().querySelector('b')
                                timerInterval = setInterval(() => {
                                    b.textContent = Swal.getTimerLeft()
                                }, 100)
                            },
                            willClose: () => {
                                clearInterval(timerInterval)
                            }
                        }).then((result) => {
                            if (result.dismiss === Swal.DismissReason.timer) {
                                console.log('session out .. ');
                                location.href = "/";
                            }
                        });
                    } else {
                        location.href = "/";
                    }
                } else {
                    location.href = "/";
                }
            }).fail(function (xhr) {
                console.log(xhr.status)
                Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
            }).always(function () {
                console.log("always:complete");
            });

        }
    </script>
